
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002968  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a74  08002a74  00012a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a94  08002a94  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002a94  08002a94  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a94  08002a94  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a94  08002a94  00012a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a98  08002a98  00012a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000068  08002b04  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08002b04  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095be  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a9a  00000000  00000000  0002964f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002b0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002bb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a9e  00000000  00000000  0002c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b286  00000000  00000000  00042f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082416  00000000  00000000  0004e214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d062a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000297c  00000000  00000000  000d0680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a5c 	.word	0x08002a5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002a5c 	.word	0x08002a5c

0800014c <isButton1Pressed>:
int TimerForButton3 = 200;
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed() {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1) {
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}

	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000084 	.word	0x20000084

08000170 <isButton2Pressed>:

int isButton2Pressed() {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1) {
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}

	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000088 	.word	0x20000088

08000194 <isButton3Pressed>:

int isButton3Pressed() {
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1) {
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}

	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000008c 	.word	0x2000008c

080001b8 <subKeyProcessForButton1>:


void subKeyProcessForButton1() {
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	button1_flag = 1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subKeyProcessForButton1+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000084 	.word	0x20000084

080001d0 <subKeyProcessForButton2>:

void subKeyProcessForButton2() {
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	button2_flag = 1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <subKeyProcessForButton2+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000088 	.word	0x20000088

080001e8 <subKeyProcessForButton3>:

void subKeyProcessForButton3() {
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	button3_flag = 1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <subKeyProcessForButton3+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000008c 	.word	0x2000008c

08000200 <getKeyInputForButton1>:

void getKeyInputForButton1() {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	KeyReg1_0 = KeyReg1_1;
 8000204:	4b1e      	ldr	r3, [pc, #120]	; (8000280 <getKeyInputForButton1+0x80>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a1e      	ldr	r2, [pc, #120]	; (8000284 <getKeyInputForButton1+0x84>)
 800020a:	6013      	str	r3, [r2, #0]
	KeyReg1_1 = KeyReg1_2;
 800020c:	4b1e      	ldr	r3, [pc, #120]	; (8000288 <getKeyInputForButton1+0x88>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <getKeyInputForButton1+0x80>)
 8000212:	6013      	str	r3, [r2, #0]
	KeyReg1_2 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000214:	2104      	movs	r1, #4
 8000216:	481d      	ldr	r0, [pc, #116]	; (800028c <getKeyInputForButton1+0x8c>)
 8000218:	f001 fbe0 	bl	80019dc <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	461a      	mov	r2, r3
 8000220:	4b19      	ldr	r3, [pc, #100]	; (8000288 <getKeyInputForButton1+0x88>)
 8000222:	601a      	str	r2, [r3, #0]

	if((KeyReg1_0 == KeyReg1_1) && (KeyReg1_1 == KeyReg1_2))
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <getKeyInputForButton1+0x84>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b15      	ldr	r3, [pc, #84]	; (8000280 <getKeyInputForButton1+0x80>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	429a      	cmp	r2, r3
 800022e:	d125      	bne.n	800027c <getKeyInputForButton1+0x7c>
 8000230:	4b13      	ldr	r3, [pc, #76]	; (8000280 <getKeyInputForButton1+0x80>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b14      	ldr	r3, [pc, #80]	; (8000288 <getKeyInputForButton1+0x88>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	429a      	cmp	r2, r3
 800023a:	d11f      	bne.n	800027c <getKeyInputForButton1+0x7c>
	{
		if(KeyReg1_3 != KeyReg1_2)
 800023c:	4b14      	ldr	r3, [pc, #80]	; (8000290 <getKeyInputForButton1+0x90>)
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4b11      	ldr	r3, [pc, #68]	; (8000288 <getKeyInputForButton1+0x88>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	429a      	cmp	r2, r3
 8000246:	d00d      	beq.n	8000264 <getKeyInputForButton1+0x64>
		{
			KeyReg1_3 = KeyReg1_2;
 8000248:	4b0f      	ldr	r3, [pc, #60]	; (8000288 <getKeyInputForButton1+0x88>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a10      	ldr	r2, [pc, #64]	; (8000290 <getKeyInputForButton1+0x90>)
 800024e:	6013      	str	r3, [r2, #0]
			if(KeyReg1_2 == PRESSED_STATE) {
 8000250:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <getKeyInputForButton1+0x88>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d111      	bne.n	800027c <getKeyInputForButton1+0x7c>
				subKeyProcessForButton1();
 8000258:	f7ff ffae 	bl	80001b8 <subKeyProcessForButton1>
				TimerForButton1 = 200;
 800025c:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <getKeyInputForButton1+0x94>)
 800025e:	22c8      	movs	r2, #200	; 0xc8
 8000260:	601a      	str	r2, [r3, #0]
			if(TimerForButton1 == 0) {
				KeyReg1_3 = NORMAL_STATE;
			}
		}
	}
}
 8000262:	e00b      	b.n	800027c <getKeyInputForButton1+0x7c>
			TimerForButton1--;
 8000264:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <getKeyInputForButton1+0x94>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	3b01      	subs	r3, #1
 800026a:	4a0a      	ldr	r2, [pc, #40]	; (8000294 <getKeyInputForButton1+0x94>)
 800026c:	6013      	str	r3, [r2, #0]
			if(TimerForButton1 == 0) {
 800026e:	4b09      	ldr	r3, [pc, #36]	; (8000294 <getKeyInputForButton1+0x94>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d102      	bne.n	800027c <getKeyInputForButton1+0x7c>
				KeyReg1_3 = NORMAL_STATE;
 8000276:	4b06      	ldr	r3, [pc, #24]	; (8000290 <getKeyInputForButton1+0x90>)
 8000278:	2201      	movs	r2, #1
 800027a:	601a      	str	r2, [r3, #0]
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000004 	.word	0x20000004
 8000284:	20000000 	.word	0x20000000
 8000288:	20000008 	.word	0x20000008
 800028c:	40010800 	.word	0x40010800
 8000290:	2000000c 	.word	0x2000000c
 8000294:	20000030 	.word	0x20000030

08000298 <getKeyInputForButton2>:

void getKeyInputForButton2() {
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	KeyReg2_0 = KeyReg2_1;
 800029c:	4b1e      	ldr	r3, [pc, #120]	; (8000318 <getKeyInputForButton2+0x80>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a1e      	ldr	r2, [pc, #120]	; (800031c <getKeyInputForButton2+0x84>)
 80002a2:	6013      	str	r3, [r2, #0]
	KeyReg2_1 = KeyReg2_2;
 80002a4:	4b1e      	ldr	r3, [pc, #120]	; (8000320 <getKeyInputForButton2+0x88>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a1b      	ldr	r2, [pc, #108]	; (8000318 <getKeyInputForButton2+0x80>)
 80002aa:	6013      	str	r3, [r2, #0]
	KeyReg2_2 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80002ac:	2108      	movs	r1, #8
 80002ae:	481d      	ldr	r0, [pc, #116]	; (8000324 <getKeyInputForButton2+0x8c>)
 80002b0:	f001 fb94 	bl	80019dc <HAL_GPIO_ReadPin>
 80002b4:	4603      	mov	r3, r0
 80002b6:	461a      	mov	r2, r3
 80002b8:	4b19      	ldr	r3, [pc, #100]	; (8000320 <getKeyInputForButton2+0x88>)
 80002ba:	601a      	str	r2, [r3, #0]

	if((KeyReg2_0 == KeyReg2_1) && (KeyReg2_1 == KeyReg2_2))
 80002bc:	4b17      	ldr	r3, [pc, #92]	; (800031c <getKeyInputForButton2+0x84>)
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	4b15      	ldr	r3, [pc, #84]	; (8000318 <getKeyInputForButton2+0x80>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d125      	bne.n	8000314 <getKeyInputForButton2+0x7c>
 80002c8:	4b13      	ldr	r3, [pc, #76]	; (8000318 <getKeyInputForButton2+0x80>)
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	4b14      	ldr	r3, [pc, #80]	; (8000320 <getKeyInputForButton2+0x88>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d11f      	bne.n	8000314 <getKeyInputForButton2+0x7c>
	{
		if(KeyReg2_3 != KeyReg2_2)
 80002d4:	4b14      	ldr	r3, [pc, #80]	; (8000328 <getKeyInputForButton2+0x90>)
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	4b11      	ldr	r3, [pc, #68]	; (8000320 <getKeyInputForButton2+0x88>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	429a      	cmp	r2, r3
 80002de:	d00d      	beq.n	80002fc <getKeyInputForButton2+0x64>
		{
			KeyReg2_3 = KeyReg2_2;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <getKeyInputForButton2+0x88>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a10      	ldr	r2, [pc, #64]	; (8000328 <getKeyInputForButton2+0x90>)
 80002e6:	6013      	str	r3, [r2, #0]
			if(KeyReg2_2 == PRESSED_STATE) {
 80002e8:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <getKeyInputForButton2+0x88>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d111      	bne.n	8000314 <getKeyInputForButton2+0x7c>
				subKeyProcessForButton2();
 80002f0:	f7ff ff6e 	bl	80001d0 <subKeyProcessForButton2>
				TimerForButton2 = 200;
 80002f4:	4b0d      	ldr	r3, [pc, #52]	; (800032c <getKeyInputForButton2+0x94>)
 80002f6:	22c8      	movs	r2, #200	; 0xc8
 80002f8:	601a      	str	r2, [r3, #0]
			if(TimerForButton2 == 0) {
				KeyReg2_3 = NORMAL_STATE;
			}
		}
	}
}
 80002fa:	e00b      	b.n	8000314 <getKeyInputForButton2+0x7c>
			TimerForButton2--;
 80002fc:	4b0b      	ldr	r3, [pc, #44]	; (800032c <getKeyInputForButton2+0x94>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	3b01      	subs	r3, #1
 8000302:	4a0a      	ldr	r2, [pc, #40]	; (800032c <getKeyInputForButton2+0x94>)
 8000304:	6013      	str	r3, [r2, #0]
			if(TimerForButton2 == 0) {
 8000306:	4b09      	ldr	r3, [pc, #36]	; (800032c <getKeyInputForButton2+0x94>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d102      	bne.n	8000314 <getKeyInputForButton2+0x7c>
				KeyReg2_3 = NORMAL_STATE;
 800030e:	4b06      	ldr	r3, [pc, #24]	; (8000328 <getKeyInputForButton2+0x90>)
 8000310:	2201      	movs	r2, #1
 8000312:	601a      	str	r2, [r3, #0]
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000014 	.word	0x20000014
 800031c:	20000010 	.word	0x20000010
 8000320:	20000018 	.word	0x20000018
 8000324:	40010800 	.word	0x40010800
 8000328:	2000001c 	.word	0x2000001c
 800032c:	20000034 	.word	0x20000034

08000330 <getKeyInputForButton3>:

void getKeyInputForButton3() {
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	KeyReg3_0 = KeyReg3_1;
 8000334:	4b1e      	ldr	r3, [pc, #120]	; (80003b0 <getKeyInputForButton3+0x80>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a1e      	ldr	r2, [pc, #120]	; (80003b4 <getKeyInputForButton3+0x84>)
 800033a:	6013      	str	r3, [r2, #0]
	KeyReg3_1 = KeyReg3_2;
 800033c:	4b1e      	ldr	r3, [pc, #120]	; (80003b8 <getKeyInputForButton3+0x88>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a1b      	ldr	r2, [pc, #108]	; (80003b0 <getKeyInputForButton3+0x80>)
 8000342:	6013      	str	r3, [r2, #0]
	KeyReg3_2 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000344:	2110      	movs	r1, #16
 8000346:	481d      	ldr	r0, [pc, #116]	; (80003bc <getKeyInputForButton3+0x8c>)
 8000348:	f001 fb48 	bl	80019dc <HAL_GPIO_ReadPin>
 800034c:	4603      	mov	r3, r0
 800034e:	461a      	mov	r2, r3
 8000350:	4b19      	ldr	r3, [pc, #100]	; (80003b8 <getKeyInputForButton3+0x88>)
 8000352:	601a      	str	r2, [r3, #0]

	if((KeyReg3_0 == KeyReg3_1) && (KeyReg3_1 == KeyReg3_2))
 8000354:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <getKeyInputForButton3+0x84>)
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <getKeyInputForButton3+0x80>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	429a      	cmp	r2, r3
 800035e:	d125      	bne.n	80003ac <getKeyInputForButton3+0x7c>
 8000360:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <getKeyInputForButton3+0x80>)
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <getKeyInputForButton3+0x88>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	429a      	cmp	r2, r3
 800036a:	d11f      	bne.n	80003ac <getKeyInputForButton3+0x7c>
	{
		if(KeyReg3_3 != KeyReg3_2)
 800036c:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <getKeyInputForButton3+0x90>)
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <getKeyInputForButton3+0x88>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	429a      	cmp	r2, r3
 8000376:	d00d      	beq.n	8000394 <getKeyInputForButton3+0x64>
		{
			KeyReg3_3 = KeyReg3_2;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <getKeyInputForButton3+0x88>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a10      	ldr	r2, [pc, #64]	; (80003c0 <getKeyInputForButton3+0x90>)
 800037e:	6013      	str	r3, [r2, #0]
			if(KeyReg3_2 == PRESSED_STATE) {
 8000380:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <getKeyInputForButton3+0x88>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d111      	bne.n	80003ac <getKeyInputForButton3+0x7c>
			subKeyProcessForButton3();
 8000388:	f7ff ff2e 	bl	80001e8 <subKeyProcessForButton3>
			TimerForButton3 = 200;
 800038c:	4b0d      	ldr	r3, [pc, #52]	; (80003c4 <getKeyInputForButton3+0x94>)
 800038e:	22c8      	movs	r2, #200	; 0xc8
 8000390:	601a      	str	r2, [r3, #0]
			if(TimerForButton3 == 0) {
			KeyReg3_3 = NORMAL_STATE;
			}
		}
	}
}
 8000392:	e00b      	b.n	80003ac <getKeyInputForButton3+0x7c>
			TimerForButton3--;
 8000394:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <getKeyInputForButton3+0x94>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	3b01      	subs	r3, #1
 800039a:	4a0a      	ldr	r2, [pc, #40]	; (80003c4 <getKeyInputForButton3+0x94>)
 800039c:	6013      	str	r3, [r2, #0]
			if(TimerForButton3 == 0) {
 800039e:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <getKeyInputForButton3+0x94>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d102      	bne.n	80003ac <getKeyInputForButton3+0x7c>
			KeyReg3_3 = NORMAL_STATE;
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <getKeyInputForButton3+0x90>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	601a      	str	r2, [r3, #0]
}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000024 	.word	0x20000024
 80003b4:	20000020 	.word	0x20000020
 80003b8:	20000028 	.word	0x20000028
 80003bc:	40010800 	.word	0x40010800
 80003c0:	2000002c 	.word	0x2000002c
 80003c4:	20000038 	.word	0x20000038

080003c8 <turnOff7SEG>:
 */


#include "display7SEG.h"

void turnOff7SEG(){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, 1);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2101      	movs	r1, #1
 80003d0:	4811      	ldr	r0, [pc, #68]	; (8000418 <turnOff7SEG+0x50>)
 80003d2:	f001 fb1a 	bl	8001a0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, 1);
 80003d6:	2201      	movs	r2, #1
 80003d8:	2102      	movs	r1, #2
 80003da:	480f      	ldr	r0, [pc, #60]	; (8000418 <turnOff7SEG+0x50>)
 80003dc:	f001 fb15 	bl	8001a0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, 1);
 80003e0:	2201      	movs	r2, #1
 80003e2:	2104      	movs	r1, #4
 80003e4:	480c      	ldr	r0, [pc, #48]	; (8000418 <turnOff7SEG+0x50>)
 80003e6:	f001 fb10 	bl	8001a0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, 1);
 80003ea:	2201      	movs	r2, #1
 80003ec:	2108      	movs	r1, #8
 80003ee:	480a      	ldr	r0, [pc, #40]	; (8000418 <turnOff7SEG+0x50>)
 80003f0:	f001 fb0b 	bl	8001a0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 1);
 80003f4:	2201      	movs	r2, #1
 80003f6:	2110      	movs	r1, #16
 80003f8:	4807      	ldr	r0, [pc, #28]	; (8000418 <turnOff7SEG+0x50>)
 80003fa:	f001 fb06 	bl	8001a0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, 1);
 80003fe:	2201      	movs	r2, #1
 8000400:	2120      	movs	r1, #32
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <turnOff7SEG+0x50>)
 8000404:	f001 fb01 	bl	8001a0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, 1);
 8000408:	2201      	movs	r2, #1
 800040a:	2140      	movs	r1, #64	; 0x40
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <turnOff7SEG+0x50>)
 800040e:	f001 fafc 	bl	8001a0a <HAL_GPIO_WritePin>
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40010c00 	.word	0x40010c00

0800041c <turnOn7SEG>:

void turnOn7SEG(int num){
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2b04      	cmp	r3, #4
 8000428:	f200 809f 	bhi.w	800056a <turnOn7SEG+0x14e>
 800042c:	a201      	add	r2, pc, #4	; (adr r2, 8000434 <turnOn7SEG+0x18>)
 800042e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000432:	bf00      	nop
 8000434:	08000449 	.word	0x08000449
 8000438:	08000483 	.word	0x08000483
 800043c:	080004bd 	.word	0x080004bd
 8000440:	080004f7 	.word	0x080004f7
 8000444:	08000531 	.word	0x08000531
	switch(num){
		case 0:
		{
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000448:	2200      	movs	r2, #0
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	4849      	ldr	r0, [pc, #292]	; (8000574 <turnOn7SEG+0x158>)
 800044e:	f001 fadc 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000452:	2201      	movs	r2, #1
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	4847      	ldr	r0, [pc, #284]	; (8000574 <turnOn7SEG+0x158>)
 8000458:	f001 fad7 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000462:	4844      	ldr	r0, [pc, #272]	; (8000574 <turnOn7SEG+0x158>)
 8000464:	f001 fad1 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000468:	2201      	movs	r2, #1
 800046a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800046e:	4841      	ldr	r0, [pc, #260]	; (8000574 <turnOn7SEG+0x158>)
 8000470:	f001 facb 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, 1);
 8000474:	2201      	movs	r2, #1
 8000476:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800047a:	483e      	ldr	r0, [pc, #248]	; (8000574 <turnOn7SEG+0x158>)
 800047c:	f001 fac5 	bl	8001a0a <HAL_GPIO_WritePin>
			break;
 8000480:	e074      	b.n	800056c <turnOn7SEG+0x150>
		}
		case 1:
		{
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000482:	2201      	movs	r2, #1
 8000484:	2140      	movs	r1, #64	; 0x40
 8000486:	483b      	ldr	r0, [pc, #236]	; (8000574 <turnOn7SEG+0x158>)
 8000488:	f001 fabf 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 800048c:	2200      	movs	r2, #0
 800048e:	2180      	movs	r1, #128	; 0x80
 8000490:	4838      	ldr	r0, [pc, #224]	; (8000574 <turnOn7SEG+0x158>)
 8000492:	f001 faba 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000496:	2201      	movs	r2, #1
 8000498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800049c:	4835      	ldr	r0, [pc, #212]	; (8000574 <turnOn7SEG+0x158>)
 800049e:	f001 fab4 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 80004a2:	2201      	movs	r2, #1
 80004a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a8:	4832      	ldr	r0, [pc, #200]	; (8000574 <turnOn7SEG+0x158>)
 80004aa:	f001 faae 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, 1);
 80004ae:	2201      	movs	r2, #1
 80004b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b4:	482f      	ldr	r0, [pc, #188]	; (8000574 <turnOn7SEG+0x158>)
 80004b6:	f001 faa8 	bl	8001a0a <HAL_GPIO_WritePin>
			break;
 80004ba:	e057      	b.n	800056c <turnOn7SEG+0x150>
		}
		case 2:
		{
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 80004bc:	2201      	movs	r2, #1
 80004be:	2140      	movs	r1, #64	; 0x40
 80004c0:	482c      	ldr	r0, [pc, #176]	; (8000574 <turnOn7SEG+0x158>)
 80004c2:	f001 faa2 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 80004c6:	2201      	movs	r2, #1
 80004c8:	2180      	movs	r1, #128	; 0x80
 80004ca:	482a      	ldr	r0, [pc, #168]	; (8000574 <turnOn7SEG+0x158>)
 80004cc:	f001 fa9d 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d6:	4827      	ldr	r0, [pc, #156]	; (8000574 <turnOn7SEG+0x158>)
 80004d8:	f001 fa97 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 80004dc:	2201      	movs	r2, #1
 80004de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004e2:	4824      	ldr	r0, [pc, #144]	; (8000574 <turnOn7SEG+0x158>)
 80004e4:	f001 fa91 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, 1);
 80004e8:	2201      	movs	r2, #1
 80004ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ee:	4821      	ldr	r0, [pc, #132]	; (8000574 <turnOn7SEG+0x158>)
 80004f0:	f001 fa8b 	bl	8001a0a <HAL_GPIO_WritePin>
			break;
 80004f4:	e03a      	b.n	800056c <turnOn7SEG+0x150>
		}
		case 3:
		{
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 80004f6:	2201      	movs	r2, #1
 80004f8:	2140      	movs	r1, #64	; 0x40
 80004fa:	481e      	ldr	r0, [pc, #120]	; (8000574 <turnOn7SEG+0x158>)
 80004fc:	f001 fa85 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000500:	2201      	movs	r2, #1
 8000502:	2180      	movs	r1, #128	; 0x80
 8000504:	481b      	ldr	r0, [pc, #108]	; (8000574 <turnOn7SEG+0x158>)
 8000506:	f001 fa80 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 800050a:	2201      	movs	r2, #1
 800050c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000510:	4818      	ldr	r0, [pc, #96]	; (8000574 <turnOn7SEG+0x158>)
 8000512:	f001 fa7a 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800051c:	4815      	ldr	r0, [pc, #84]	; (8000574 <turnOn7SEG+0x158>)
 800051e:	f001 fa74 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, 1);
 8000522:	2201      	movs	r2, #1
 8000524:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000528:	4812      	ldr	r0, [pc, #72]	; (8000574 <turnOn7SEG+0x158>)
 800052a:	f001 fa6e 	bl	8001a0a <HAL_GPIO_WritePin>
			break;
 800052e:	e01d      	b.n	800056c <turnOn7SEG+0x150>
		}
		case 4:
		{
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000530:	2201      	movs	r2, #1
 8000532:	2140      	movs	r1, #64	; 0x40
 8000534:	480f      	ldr	r0, [pc, #60]	; (8000574 <turnOn7SEG+0x158>)
 8000536:	f001 fa68 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 800053a:	2201      	movs	r2, #1
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	480d      	ldr	r0, [pc, #52]	; (8000574 <turnOn7SEG+0x158>)
 8000540:	f001 fa63 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054a:	480a      	ldr	r0, [pc, #40]	; (8000574 <turnOn7SEG+0x158>)
 800054c:	f001 fa5d 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000550:	2201      	movs	r2, #1
 8000552:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000556:	4807      	ldr	r0, [pc, #28]	; (8000574 <turnOn7SEG+0x158>)
 8000558:	f001 fa57 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, 0);
 800055c:	2200      	movs	r2, #0
 800055e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000562:	4804      	ldr	r0, [pc, #16]	; (8000574 <turnOn7SEG+0x158>)
 8000564:	f001 fa51 	bl	8001a0a <HAL_GPIO_WritePin>
			break;
 8000568:	e000      	b.n	800056c <turnOn7SEG+0x150>
		}
		default: break;
 800056a:	bf00      	nop
	}
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40010800 	.word	0x40010800

08000578 <update7SEG>:

void update7SEG(int index){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2b04      	cmp	r3, #4
 8000584:	d843      	bhi.n	800060e <update7SEG+0x96>
 8000586:	a201      	add	r2, pc, #4	; (adr r2, 800058c <update7SEG+0x14>)
 8000588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058c:	080005a1 	.word	0x080005a1
 8000590:	080005b7 	.word	0x080005b7
 8000594:	080005cd 	.word	0x080005cd
 8000598:	080005e3 	.word	0x080005e3
 800059c:	080005f9 	.word	0x080005f9
	switch(index) {
		case FIRST_LED:
		{
			turnOn7SEG(FIRST_LED);
 80005a0:	2000      	movs	r0, #0
 80005a2:	f7ff ff3b 	bl	800041c <turnOn7SEG>
			display7SEG(led_buffer[index]);
 80005a6:	4a1c      	ldr	r2, [pc, #112]	; (8000618 <update7SEG+0xa0>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f834 	bl	800061c <display7SEG>
			break;
 80005b4:	e02c      	b.n	8000610 <update7SEG+0x98>
		}
		case SECOND_LED:
		{
			turnOn7SEG(SECOND_LED);
 80005b6:	2001      	movs	r0, #1
 80005b8:	f7ff ff30 	bl	800041c <turnOn7SEG>
			display7SEG(led_buffer[index]);
 80005bc:	4a16      	ldr	r2, [pc, #88]	; (8000618 <update7SEG+0xa0>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f829 	bl	800061c <display7SEG>
			break;
 80005ca:	e021      	b.n	8000610 <update7SEG+0x98>
		}
		case THIRD_LED:
		{
			turnOn7SEG(THIRD_LED);
 80005cc:	2002      	movs	r0, #2
 80005ce:	f7ff ff25 	bl	800041c <turnOn7SEG>
			display7SEG(led_buffer[index]);
 80005d2:	4a11      	ldr	r2, [pc, #68]	; (8000618 <update7SEG+0xa0>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f81e 	bl	800061c <display7SEG>
			break;
 80005e0:	e016      	b.n	8000610 <update7SEG+0x98>
		}
		case FOURTH_LED:
		{
			turnOn7SEG(FOURTH_LED);
 80005e2:	2003      	movs	r0, #3
 80005e4:	f7ff ff1a 	bl	800041c <turnOn7SEG>
			display7SEG(led_buffer[index]);
 80005e8:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <update7SEG+0xa0>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 f813 	bl	800061c <display7SEG>
			break;
 80005f6:	e00b      	b.n	8000610 <update7SEG+0x98>
		}
		case FIFTH_LED:
		{
			turnOn7SEG(FIFTH_LED);
 80005f8:	2004      	movs	r0, #4
 80005fa:	f7ff ff0f 	bl	800041c <turnOn7SEG>
			display7SEG(led_buffer[index]);
 80005fe:	4a06      	ldr	r2, [pc, #24]	; (8000618 <update7SEG+0xa0>)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f808 	bl	800061c <display7SEG>
			break;
 800060c:	e000      	b.n	8000610 <update7SEG+0x98>
		}
		default: break;
 800060e:	bf00      	nop
	}
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000003c 	.word	0x2000003c

0800061c <display7SEG>:


void display7SEG (int num){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	turnOff7SEG();
 8000624:	f7ff fed0 	bl	80003c8 <turnOff7SEG>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b09      	cmp	r3, #9
 800062c:	f200 8117 	bhi.w	800085e <display7SEG+0x242>
 8000630:	a201      	add	r2, pc, #4	; (adr r2, 8000638 <display7SEG+0x1c>)
 8000632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000636:	bf00      	nop
 8000638:	08000661 	.word	0x08000661
 800063c:	0800069f 	.word	0x0800069f
 8000640:	080006b5 	.word	0x080006b5
 8000644:	080006e9 	.word	0x080006e9
 8000648:	0800071d 	.word	0x0800071d
 800064c:	08000747 	.word	0x08000747
 8000650:	0800077b 	.word	0x0800077b
 8000654:	080007b9 	.word	0x080007b9
 8000658:	080007d9 	.word	0x080007d9
 800065c:	08000821 	.word	0x08000821
	switch(num){
	case 0:
	{
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, 0);
 8000660:	2200      	movs	r2, #0
 8000662:	2101      	movs	r1, #1
 8000664:	4880      	ldr	r0, [pc, #512]	; (8000868 <display7SEG+0x24c>)
 8000666:	f001 f9d0 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2102      	movs	r1, #2
 800066e:	487e      	ldr	r0, [pc, #504]	; (8000868 <display7SEG+0x24c>)
 8000670:	f001 f9cb 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2104      	movs	r1, #4
 8000678:	487b      	ldr	r0, [pc, #492]	; (8000868 <display7SEG+0x24c>)
 800067a:	f001 f9c6 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2108      	movs	r1, #8
 8000682:	4879      	ldr	r0, [pc, #484]	; (8000868 <display7SEG+0x24c>)
 8000684:	f001 f9c1 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	2110      	movs	r1, #16
 800068c:	4876      	ldr	r0, [pc, #472]	; (8000868 <display7SEG+0x24c>)
 800068e:	f001 f9bc 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2120      	movs	r1, #32
 8000696:	4874      	ldr	r0, [pc, #464]	; (8000868 <display7SEG+0x24c>)
 8000698:	f001 f9b7 	bl	8001a0a <HAL_GPIO_WritePin>
		break;
 800069c:	e0e0      	b.n	8000860 <display7SEG+0x244>
	}
	case 1:
	{
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2102      	movs	r1, #2
 80006a2:	4871      	ldr	r0, [pc, #452]	; (8000868 <display7SEG+0x24c>)
 80006a4:	f001 f9b1 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2104      	movs	r1, #4
 80006ac:	486e      	ldr	r0, [pc, #440]	; (8000868 <display7SEG+0x24c>)
 80006ae:	f001 f9ac 	bl	8001a0a <HAL_GPIO_WritePin>
		break;
 80006b2:	e0d5      	b.n	8000860 <display7SEG+0x244>
	}
	case 2:
	{
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2101      	movs	r1, #1
 80006b8:	486b      	ldr	r0, [pc, #428]	; (8000868 <display7SEG+0x24c>)
 80006ba:	f001 f9a6 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2102      	movs	r1, #2
 80006c2:	4869      	ldr	r0, [pc, #420]	; (8000868 <display7SEG+0x24c>)
 80006c4:	f001 f9a1 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2108      	movs	r1, #8
 80006cc:	4866      	ldr	r0, [pc, #408]	; (8000868 <display7SEG+0x24c>)
 80006ce:	f001 f99c 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2110      	movs	r1, #16
 80006d6:	4864      	ldr	r0, [pc, #400]	; (8000868 <display7SEG+0x24c>)
 80006d8:	f001 f997 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2140      	movs	r1, #64	; 0x40
 80006e0:	4861      	ldr	r0, [pc, #388]	; (8000868 <display7SEG+0x24c>)
 80006e2:	f001 f992 	bl	8001a0a <HAL_GPIO_WritePin>
		break;
 80006e6:	e0bb      	b.n	8000860 <display7SEG+0x244>
	}
	case 3:
	{
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2101      	movs	r1, #1
 80006ec:	485e      	ldr	r0, [pc, #376]	; (8000868 <display7SEG+0x24c>)
 80006ee:	f001 f98c 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2102      	movs	r1, #2
 80006f6:	485c      	ldr	r0, [pc, #368]	; (8000868 <display7SEG+0x24c>)
 80006f8:	f001 f987 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, 0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2104      	movs	r1, #4
 8000700:	4859      	ldr	r0, [pc, #356]	; (8000868 <display7SEG+0x24c>)
 8000702:	f001 f982 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2108      	movs	r1, #8
 800070a:	4857      	ldr	r0, [pc, #348]	; (8000868 <display7SEG+0x24c>)
 800070c:	f001 f97d 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2140      	movs	r1, #64	; 0x40
 8000714:	4854      	ldr	r0, [pc, #336]	; (8000868 <display7SEG+0x24c>)
 8000716:	f001 f978 	bl	8001a0a <HAL_GPIO_WritePin>
		break;
 800071a:	e0a1      	b.n	8000860 <display7SEG+0x244>
	}
	case 4:
	{
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, 0);
 800071c:	2200      	movs	r2, #0
 800071e:	2102      	movs	r1, #2
 8000720:	4851      	ldr	r0, [pc, #324]	; (8000868 <display7SEG+0x24c>)
 8000722:	f001 f972 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2104      	movs	r1, #4
 800072a:	484f      	ldr	r0, [pc, #316]	; (8000868 <display7SEG+0x24c>)
 800072c:	f001 f96d 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2120      	movs	r1, #32
 8000734:	484c      	ldr	r0, [pc, #304]	; (8000868 <display7SEG+0x24c>)
 8000736:	f001 f968 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2140      	movs	r1, #64	; 0x40
 800073e:	484a      	ldr	r0, [pc, #296]	; (8000868 <display7SEG+0x24c>)
 8000740:	f001 f963 	bl	8001a0a <HAL_GPIO_WritePin>
		break;
 8000744:	e08c      	b.n	8000860 <display7SEG+0x244>
	}
	case 5:
	{
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2101      	movs	r1, #1
 800074a:	4847      	ldr	r0, [pc, #284]	; (8000868 <display7SEG+0x24c>)
 800074c:	f001 f95d 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, 0);
 8000750:	2200      	movs	r2, #0
 8000752:	2104      	movs	r1, #4
 8000754:	4844      	ldr	r0, [pc, #272]	; (8000868 <display7SEG+0x24c>)
 8000756:	f001 f958 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2108      	movs	r1, #8
 800075e:	4842      	ldr	r0, [pc, #264]	; (8000868 <display7SEG+0x24c>)
 8000760:	f001 f953 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2120      	movs	r1, #32
 8000768:	483f      	ldr	r0, [pc, #252]	; (8000868 <display7SEG+0x24c>)
 800076a:	f001 f94e 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2140      	movs	r1, #64	; 0x40
 8000772:	483d      	ldr	r0, [pc, #244]	; (8000868 <display7SEG+0x24c>)
 8000774:	f001 f949 	bl	8001a0a <HAL_GPIO_WritePin>
		break;
 8000778:	e072      	b.n	8000860 <display7SEG+0x244>
	}
	case 6:
	{
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2101      	movs	r1, #1
 800077e:	483a      	ldr	r0, [pc, #232]	; (8000868 <display7SEG+0x24c>)
 8000780:	f001 f943 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	2104      	movs	r1, #4
 8000788:	4837      	ldr	r0, [pc, #220]	; (8000868 <display7SEG+0x24c>)
 800078a:	f001 f93e 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2108      	movs	r1, #8
 8000792:	4835      	ldr	r0, [pc, #212]	; (8000868 <display7SEG+0x24c>)
 8000794:	f001 f939 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2110      	movs	r1, #16
 800079c:	4832      	ldr	r0, [pc, #200]	; (8000868 <display7SEG+0x24c>)
 800079e:	f001 f934 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2120      	movs	r1, #32
 80007a6:	4830      	ldr	r0, [pc, #192]	; (8000868 <display7SEG+0x24c>)
 80007a8:	f001 f92f 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2140      	movs	r1, #64	; 0x40
 80007b0:	482d      	ldr	r0, [pc, #180]	; (8000868 <display7SEG+0x24c>)
 80007b2:	f001 f92a 	bl	8001a0a <HAL_GPIO_WritePin>
		break;
 80007b6:	e053      	b.n	8000860 <display7SEG+0x244>
	}
	case 7:
	{
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2101      	movs	r1, #1
 80007bc:	482a      	ldr	r0, [pc, #168]	; (8000868 <display7SEG+0x24c>)
 80007be:	f001 f924 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2102      	movs	r1, #2
 80007c6:	4828      	ldr	r0, [pc, #160]	; (8000868 <display7SEG+0x24c>)
 80007c8:	f001 f91f 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2104      	movs	r1, #4
 80007d0:	4825      	ldr	r0, [pc, #148]	; (8000868 <display7SEG+0x24c>)
 80007d2:	f001 f91a 	bl	8001a0a <HAL_GPIO_WritePin>
		break;
 80007d6:	e043      	b.n	8000860 <display7SEG+0x244>
	}
	case 8:
	{
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2101      	movs	r1, #1
 80007dc:	4822      	ldr	r0, [pc, #136]	; (8000868 <display7SEG+0x24c>)
 80007de:	f001 f914 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2102      	movs	r1, #2
 80007e6:	4820      	ldr	r0, [pc, #128]	; (8000868 <display7SEG+0x24c>)
 80007e8:	f001 f90f 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2104      	movs	r1, #4
 80007f0:	481d      	ldr	r0, [pc, #116]	; (8000868 <display7SEG+0x24c>)
 80007f2:	f001 f90a 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2108      	movs	r1, #8
 80007fa:	481b      	ldr	r0, [pc, #108]	; (8000868 <display7SEG+0x24c>)
 80007fc:	f001 f905 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2110      	movs	r1, #16
 8000804:	4818      	ldr	r0, [pc, #96]	; (8000868 <display7SEG+0x24c>)
 8000806:	f001 f900 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2120      	movs	r1, #32
 800080e:	4816      	ldr	r0, [pc, #88]	; (8000868 <display7SEG+0x24c>)
 8000810:	f001 f8fb 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2140      	movs	r1, #64	; 0x40
 8000818:	4813      	ldr	r0, [pc, #76]	; (8000868 <display7SEG+0x24c>)
 800081a:	f001 f8f6 	bl	8001a0a <HAL_GPIO_WritePin>
		break;
 800081e:	e01f      	b.n	8000860 <display7SEG+0x244>
	}
	case 9:
	{
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2101      	movs	r1, #1
 8000824:	4810      	ldr	r0, [pc, #64]	; (8000868 <display7SEG+0x24c>)
 8000826:	f001 f8f0 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2102      	movs	r1, #2
 800082e:	480e      	ldr	r0, [pc, #56]	; (8000868 <display7SEG+0x24c>)
 8000830:	f001 f8eb 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2104      	movs	r1, #4
 8000838:	480b      	ldr	r0, [pc, #44]	; (8000868 <display7SEG+0x24c>)
 800083a:	f001 f8e6 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2108      	movs	r1, #8
 8000842:	4809      	ldr	r0, [pc, #36]	; (8000868 <display7SEG+0x24c>)
 8000844:	f001 f8e1 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2120      	movs	r1, #32
 800084c:	4806      	ldr	r0, [pc, #24]	; (8000868 <display7SEG+0x24c>)
 800084e:	f001 f8dc 	bl	8001a0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2140      	movs	r1, #64	; 0x40
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <display7SEG+0x24c>)
 8000858:	f001 f8d7 	bl	8001a0a <HAL_GPIO_WritePin>
		break;
 800085c:	e000      	b.n	8000860 <display7SEG+0x244>
	}
	default:
		break;
 800085e:	bf00      	nop
	}
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40010c00 	.word	0x40010c00

0800086c <firstLaneTrafficLight>:
 *      Author: trand
 */

#include "firstLane.h"

void firstLaneTrafficLight() {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	led_buffer[1] = firstLaneCounter/10;
 8000870:	4b66      	ldr	r3, [pc, #408]	; (8000a0c <firstLaneTrafficLight+0x1a0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a66      	ldr	r2, [pc, #408]	; (8000a10 <firstLaneTrafficLight+0x1a4>)
 8000876:	fb82 1203 	smull	r1, r2, r2, r3
 800087a:	1092      	asrs	r2, r2, #2
 800087c:	17db      	asrs	r3, r3, #31
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	4a64      	ldr	r2, [pc, #400]	; (8000a14 <firstLaneTrafficLight+0x1a8>)
 8000882:	6053      	str	r3, [r2, #4]
	led_buffer[2] = firstLaneCounter%10;
 8000884:	4b61      	ldr	r3, [pc, #388]	; (8000a0c <firstLaneTrafficLight+0x1a0>)
 8000886:	6819      	ldr	r1, [r3, #0]
 8000888:	4b61      	ldr	r3, [pc, #388]	; (8000a10 <firstLaneTrafficLight+0x1a4>)
 800088a:	fb83 2301 	smull	r2, r3, r3, r1
 800088e:	109a      	asrs	r2, r3, #2
 8000890:	17cb      	asrs	r3, r1, #31
 8000892:	1ad2      	subs	r2, r2, r3
 8000894:	4613      	mov	r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	4413      	add	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	1aca      	subs	r2, r1, r3
 800089e:	4b5d      	ldr	r3, [pc, #372]	; (8000a14 <firstLaneTrafficLight+0x1a8>)
 80008a0:	609a      	str	r2, [r3, #8]
	switch (firstLaneStatus) {
 80008a2:	4b5d      	ldr	r3, [pc, #372]	; (8000a18 <firstLaneTrafficLight+0x1ac>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	f200 80a6 	bhi.w	80009f8 <firstLaneTrafficLight+0x18c>
 80008ac:	a201      	add	r2, pc, #4	; (adr r2, 80008b4 <firstLaneTrafficLight+0x48>)
 80008ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b2:	bf00      	nop
 80008b4:	080008c5 	.word	0x080008c5
 80008b8:	080008f1 	.word	0x080008f1
 80008bc:	08000949 	.word	0x08000949
 80008c0:	080009a1 	.word	0x080009a1
		case 0:
		{
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 1);
 80008c4:	2201      	movs	r2, #1
 80008c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ca:	4854      	ldr	r0, [pc, #336]	; (8000a1c <firstLaneTrafficLight+0x1b0>)
 80008cc:	f001 f89d 	bl	8001a0a <HAL_GPIO_WritePin>
			firstLaneCounter = redValue;
 80008d0:	4b53      	ldr	r3, [pc, #332]	; (8000a20 <firstLaneTrafficLight+0x1b4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a4d      	ldr	r2, [pc, #308]	; (8000a0c <firstLaneTrafficLight+0x1a0>)
 80008d6:	6013      	str	r3, [r2, #0]
			setTimer1(redValue*100);
 80008d8:	4b51      	ldr	r3, [pc, #324]	; (8000a20 <firstLaneTrafficLight+0x1b4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2264      	movs	r2, #100	; 0x64
 80008de:	fb02 f303 	mul.w	r3, r2, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fb6e 	bl	8000fc4 <setTimer1>
			firstLaneStatus = 1;
 80008e8:	4b4b      	ldr	r3, [pc, #300]	; (8000a18 <firstLaneTrafficLight+0x1ac>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	601a      	str	r2, [r3, #0]
			break;
 80008ee:	e08a      	b.n	8000a06 <firstLaneTrafficLight+0x19a>
		}
		case 1: //RED
		{
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 1);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f6:	4849      	ldr	r0, [pc, #292]	; (8000a1c <firstLaneTrafficLight+0x1b0>)
 80008f8:	f001 f887 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YLW1_GPIO_Port, YLW1_Pin, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000902:	4846      	ldr	r0, [pc, #280]	; (8000a1c <firstLaneTrafficLight+0x1b0>)
 8000904:	f001 f881 	bl	8001a0a <HAL_GPIO_WritePin>

			if(timer3_flag == 1)
 8000908:	4b46      	ldr	r3, [pc, #280]	; (8000a24 <firstLaneTrafficLight+0x1b8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d107      	bne.n	8000920 <firstLaneTrafficLight+0xb4>
			{
				firstLaneCounter--;
 8000910:	4b3e      	ldr	r3, [pc, #248]	; (8000a0c <firstLaneTrafficLight+0x1a0>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	3b01      	subs	r3, #1
 8000916:	4a3d      	ldr	r2, [pc, #244]	; (8000a0c <firstLaneTrafficLight+0x1a0>)
 8000918:	6013      	str	r3, [r2, #0]
				setTimer3(100);
 800091a:	2064      	movs	r0, #100	; 0x64
 800091c:	f000 fb7a 	bl	8001014 <setTimer3>
//			if(firstLaneCounter == 0)
//			{
//				firstLaneCounter = grnValue;
//				firstLaneStatus = 3;
//			}
			if(timer1_flag == 1)
 8000920:	4b41      	ldr	r3, [pc, #260]	; (8000a28 <firstLaneTrafficLight+0x1bc>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d169      	bne.n	80009fc <firstLaneTrafficLight+0x190>
			{
				firstLaneCounter = grnValue;
 8000928:	4b40      	ldr	r3, [pc, #256]	; (8000a2c <firstLaneTrafficLight+0x1c0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a37      	ldr	r2, [pc, #220]	; (8000a0c <firstLaneTrafficLight+0x1a0>)
 800092e:	6013      	str	r3, [r2, #0]
				firstLaneStatus = 3;
 8000930:	4b39      	ldr	r3, [pc, #228]	; (8000a18 <firstLaneTrafficLight+0x1ac>)
 8000932:	2203      	movs	r2, #3
 8000934:	601a      	str	r2, [r3, #0]
				setTimer1(grnValue*100);
 8000936:	4b3d      	ldr	r3, [pc, #244]	; (8000a2c <firstLaneTrafficLight+0x1c0>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2264      	movs	r2, #100	; 0x64
 800093c:	fb02 f303 	mul.w	r3, r2, r3
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fb3f 	bl	8000fc4 <setTimer1>
			}
			break;
 8000946:	e059      	b.n	80009fc <firstLaneTrafficLight+0x190>
		}
		case 2: //YELLOW
		{
			HAL_GPIO_WritePin(YLW1_GPIO_Port, YLW1_Pin, 1);
 8000948:	2201      	movs	r2, #1
 800094a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800094e:	4833      	ldr	r0, [pc, #204]	; (8000a1c <firstLaneTrafficLight+0x1b0>)
 8000950:	f001 f85b 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GRN1_GPIO_Port, GRN1_Pin, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800095a:	4830      	ldr	r0, [pc, #192]	; (8000a1c <firstLaneTrafficLight+0x1b0>)
 800095c:	f001 f855 	bl	8001a0a <HAL_GPIO_WritePin>
//				firstLaneCounter = redValue;
//				firstLaneStatus = 1;
//			}
//			led_buffer[1] = firstLaneCounter/10;
//			led_buffer[2] = firstLaneCounter%10;
			if(timer3_flag == 1)
 8000960:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <firstLaneTrafficLight+0x1b8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d107      	bne.n	8000978 <firstLaneTrafficLight+0x10c>
			{
				firstLaneCounter--;
 8000968:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <firstLaneTrafficLight+0x1a0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	3b01      	subs	r3, #1
 800096e:	4a27      	ldr	r2, [pc, #156]	; (8000a0c <firstLaneTrafficLight+0x1a0>)
 8000970:	6013      	str	r3, [r2, #0]
				setTimer3(100);
 8000972:	2064      	movs	r0, #100	; 0x64
 8000974:	f000 fb4e 	bl	8001014 <setTimer3>
			}

			if(timer1_flag == 1)
 8000978:	4b2b      	ldr	r3, [pc, #172]	; (8000a28 <firstLaneTrafficLight+0x1bc>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d13f      	bne.n	8000a00 <firstLaneTrafficLight+0x194>
			{
				firstLaneCounter = redValue;
 8000980:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <firstLaneTrafficLight+0x1b4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a21      	ldr	r2, [pc, #132]	; (8000a0c <firstLaneTrafficLight+0x1a0>)
 8000986:	6013      	str	r3, [r2, #0]
				firstLaneStatus = 1;
 8000988:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <firstLaneTrafficLight+0x1ac>)
 800098a:	2201      	movs	r2, #1
 800098c:	601a      	str	r2, [r3, #0]
				setTimer1(redValue*100);
 800098e:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <firstLaneTrafficLight+0x1b4>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2264      	movs	r2, #100	; 0x64
 8000994:	fb02 f303 	mul.w	r3, r2, r3
 8000998:	4618      	mov	r0, r3
 800099a:	f000 fb13 	bl	8000fc4 <setTimer1>
			}
			break;
 800099e:	e02f      	b.n	8000a00 <firstLaneTrafficLight+0x194>
		}
		case 3: //GREEN
		{
			HAL_GPIO_WritePin(GRN1_GPIO_Port, GRN1_Pin, 1);
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a6:	481d      	ldr	r0, [pc, #116]	; (8000a1c <firstLaneTrafficLight+0x1b0>)
 80009a8:	f001 f82f 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b2:	481a      	ldr	r0, [pc, #104]	; (8000a1c <firstLaneTrafficLight+0x1b0>)
 80009b4:	f001 f829 	bl	8001a0a <HAL_GPIO_WritePin>
//				firstLaneCounter = ylwValue;
//				firstLaneStatus = 2;
//			}
//			led_buffer[1] = firstLaneCounter/10;
//			led_buffer[2] = firstLaneCounter%10;
			if(timer3_flag == 1)
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <firstLaneTrafficLight+0x1b8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d107      	bne.n	80009d0 <firstLaneTrafficLight+0x164>
			{
				firstLaneCounter--;
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <firstLaneTrafficLight+0x1a0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	3b01      	subs	r3, #1
 80009c6:	4a11      	ldr	r2, [pc, #68]	; (8000a0c <firstLaneTrafficLight+0x1a0>)
 80009c8:	6013      	str	r3, [r2, #0]
				setTimer3(100);
 80009ca:	2064      	movs	r0, #100	; 0x64
 80009cc:	f000 fb22 	bl	8001014 <setTimer3>
			}

			if(timer1_flag == 1)
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <firstLaneTrafficLight+0x1bc>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d115      	bne.n	8000a04 <firstLaneTrafficLight+0x198>
			{
				firstLaneCounter = ylwValue;
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <firstLaneTrafficLight+0x1c4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <firstLaneTrafficLight+0x1a0>)
 80009de:	6013      	str	r3, [r2, #0]
				firstLaneStatus = 2;
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <firstLaneTrafficLight+0x1ac>)
 80009e2:	2202      	movs	r2, #2
 80009e4:	601a      	str	r2, [r3, #0]
				setTimer1(ylwValue*100);
 80009e6:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <firstLaneTrafficLight+0x1c4>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2264      	movs	r2, #100	; 0x64
 80009ec:	fb02 f303 	mul.w	r3, r2, r3
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 fae7 	bl	8000fc4 <setTimer1>
			}
			break;
 80009f6:	e005      	b.n	8000a04 <firstLaneTrafficLight+0x198>
		}
		default:
			break;
 80009f8:	bf00      	nop
 80009fa:	e004      	b.n	8000a06 <firstLaneTrafficLight+0x19a>
			break;
 80009fc:	bf00      	nop
 80009fe:	e002      	b.n	8000a06 <firstLaneTrafficLight+0x19a>
			break;
 8000a00:	bf00      	nop
 8000a02:	e000      	b.n	8000a06 <firstLaneTrafficLight+0x19a>
			break;
 8000a04:	bf00      	nop
	}
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000009c 	.word	0x2000009c
 8000a10:	66666667 	.word	0x66666667
 8000a14:	2000003c 	.word	0x2000003c
 8000a18:	20000094 	.word	0x20000094
 8000a1c:	40010c00 	.word	0x40010c00
 8000a20:	20000050 	.word	0x20000050
 8000a24:	200000c8 	.word	0x200000c8
 8000a28:	200000b8 	.word	0x200000b8
 8000a2c:	20000058 	.word	0x20000058
 8000a30:	20000054 	.word	0x20000054

08000a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a38:	f000 fce6 	bl	8001408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3c:	f000 f8e4 	bl	8000c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000a40:	f000 f91e 	bl	8000c80 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000a44:	f000 f968 	bl	8000d18 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a48:	485e      	ldr	r0, [pc, #376]	; (8000bc4 <main+0x190>)
 8000a4a:	f001 fc47 	bl	80022dc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  setTimer3(100);
 8000a4e:	2064      	movs	r0, #100	; 0x64
 8000a50:	f000 fae0 	bl	8001014 <setTimer3>
  setTimer4(20);
 8000a54:	2014      	movs	r0, #20
 8000a56:	f000 faf1 	bl	800103c <setTimer4>
  setTimer5(1);
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f000 fb02 	bl	8001064 <setTimer5>
  setTimer6(1);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f000 fb13 	bl	800108c <setTimer6>
  setTimer7(1);
 8000a66:	2001      	movs	r0, #1
 8000a68:	f000 fb24 	bl	80010b4 <setTimer7>
  setTimer8(100);
 8000a6c:	2064      	movs	r0, #100	; 0x64
 8000a6e:	f000 fb35 	bl	80010dc <setTimer8>
  setTimer9(100);
 8000a72:	2064      	movs	r0, #100	; 0x64
 8000a74:	f000 fb46 	bl	8001104 <setTimer9>
  while (1)
  {

	  if(timer4_flag == 1) {
 8000a78:	4b53      	ldr	r3, [pc, #332]	; (8000bc8 <main+0x194>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d113      	bne.n	8000aa8 <main+0x74>
		  turnOff7SEG();
 8000a80:	f7ff fca2 	bl	80003c8 <turnOff7SEG>
		  if(index_led >= 5)
 8000a84:	4b51      	ldr	r3, [pc, #324]	; (8000bcc <main+0x198>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b04      	cmp	r3, #4
 8000a8a:	dd02      	ble.n	8000a92 <main+0x5e>
			  index_led = 0;
 8000a8c:	4b4f      	ldr	r3, [pc, #316]	; (8000bcc <main+0x198>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
		  update7SEG(index_led++);
 8000a92:	4b4e      	ldr	r3, [pc, #312]	; (8000bcc <main+0x198>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	494c      	ldr	r1, [pc, #304]	; (8000bcc <main+0x198>)
 8000a9a:	600a      	str	r2, [r1, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fd6b 	bl	8000578 <update7SEG>
		  setTimer4(20);
 8000aa2:	2014      	movs	r0, #20
 8000aa4:	f000 faca 	bl	800103c <setTimer4>
	  }

	  firstLaneTrafficLight();
 8000aa8:	f7ff fee0 	bl	800086c <firstLaneTrafficLight>
	  secondLaneTrafficLight();
 8000aac:	f000 f9a6 	bl	8000dfc <secondLaneTrafficLight>


	  if(timer5_flag == 1)
 8000ab0:	4b47      	ldr	r3, [pc, #284]	; (8000bd0 <main+0x19c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d104      	bne.n	8000ac2 <main+0x8e>
	  {
		  getKeyInputForButton1();
 8000ab8:	f7ff fba2 	bl	8000200 <getKeyInputForButton1>
		  setTimer5(1);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f000 fad1 	bl	8001064 <setTimer5>
	  }

	  if(timer6_flag == 1)
 8000ac2:	4b44      	ldr	r3, [pc, #272]	; (8000bd4 <main+0x1a0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d104      	bne.n	8000ad4 <main+0xa0>
	  {
		  getKeyInputForButton2();
 8000aca:	f7ff fbe5 	bl	8000298 <getKeyInputForButton2>
		  setTimer6(1);
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f000 fadc 	bl	800108c <setTimer6>
	  }

	  if(timer7_flag == 1)
 8000ad4:	4b40      	ldr	r3, [pc, #256]	; (8000bd8 <main+0x1a4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d104      	bne.n	8000ae6 <main+0xb2>
	  {
		  getKeyInputForButton3();
 8000adc:	f7ff fc28 	bl	8000330 <getKeyInputForButton3>
		  setTimer7(1);
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f000 fae7 	bl	80010b4 <setTimer7>
	  }

	  if(timer8_flag == 1)
 8000ae6:	4b3d      	ldr	r3, [pc, #244]	; (8000bdc <main+0x1a8>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d106      	bne.n	8000afc <main+0xc8>
	  {
		  HAL_GPIO_TogglePin(LED_Blinky_GPIO_Port, LED_Blinky_Pin);
 8000aee:	2120      	movs	r1, #32
 8000af0:	483b      	ldr	r0, [pc, #236]	; (8000be0 <main+0x1ac>)
 8000af2:	f000 ffa2 	bl	8001a3a <HAL_GPIO_TogglePin>
		  setTimer8(100);
 8000af6:	2064      	movs	r0, #100	; 0x64
 8000af8:	f000 faf0 	bl	80010dc <setTimer8>
	  }

	  if(isButton1Pressed() == 1) {
 8000afc:	f7ff fb26 	bl	800014c <isButton1Pressed>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d10f      	bne.n	8000b26 <main+0xf2>
		  mode++;
 8000b06:	4b37      	ldr	r3, [pc, #220]	; (8000be4 <main+0x1b0>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	4a35      	ldr	r2, [pc, #212]	; (8000be4 <main+0x1b0>)
 8000b0e:	6013      	str	r3, [r2, #0]
		  if(mode > 4)
 8000b10:	4b34      	ldr	r3, [pc, #208]	; (8000be4 <main+0x1b0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b04      	cmp	r3, #4
 8000b16:	dd02      	ble.n	8000b1e <main+0xea>
		  {
			  mode = 1;
 8000b18:	4b32      	ldr	r3, [pc, #200]	; (8000be4 <main+0x1b0>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	601a      	str	r2, [r3, #0]
		  }
		  led_buffer[0] = mode;
 8000b1e:	4b31      	ldr	r3, [pc, #196]	; (8000be4 <main+0x1b0>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a31      	ldr	r2, [pc, #196]	; (8000be8 <main+0x1b4>)
 8000b24:	6013      	str	r3, [r2, #0]
	  }

	  if(isButton2Pressed() == 1)
 8000b26:	f7ff fb23 	bl	8000170 <isButton2Pressed>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d12a      	bne.n	8000b86 <main+0x152>
	  {
		  switch(mode){
 8000b30:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <main+0x1b0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	d01b      	beq.n	8000b70 <main+0x13c>
 8000b38:	2b04      	cmp	r3, #4
 8000b3a:	dc26      	bgt.n	8000b8a <main+0x156>
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d002      	beq.n	8000b46 <main+0x112>
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	d00a      	beq.n	8000b5a <main+0x126>
			  HAL_GPIO_TogglePin(MODE4_GPIO_Port, MODE4_Pin);
			  increaseGRN++;
			  break;
		  }
		  default:
			  break;
 8000b44:	e021      	b.n	8000b8a <main+0x156>
			  HAL_GPIO_TogglePin(MODE2_GPIO_Port, MODE2_Pin);
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	4828      	ldr	r0, [pc, #160]	; (8000bec <main+0x1b8>)
 8000b4a:	f000 ff76 	bl	8001a3a <HAL_GPIO_TogglePin>
			  increaseRED++;
 8000b4e:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <main+0x1bc>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	3301      	adds	r3, #1
 8000b54:	4a26      	ldr	r2, [pc, #152]	; (8000bf0 <main+0x1bc>)
 8000b56:	6013      	str	r3, [r2, #0]
			  break;
 8000b58:	e018      	b.n	8000b8c <main+0x158>
			  HAL_GPIO_TogglePin(MODE3_GPIO_Port, MODE3_Pin);
 8000b5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5e:	4823      	ldr	r0, [pc, #140]	; (8000bec <main+0x1b8>)
 8000b60:	f000 ff6b 	bl	8001a3a <HAL_GPIO_TogglePin>
			  increaseYLW++;
 8000b64:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <main+0x1c0>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	4a22      	ldr	r2, [pc, #136]	; (8000bf4 <main+0x1c0>)
 8000b6c:	6013      	str	r3, [r2, #0]
			  break;
 8000b6e:	e00d      	b.n	8000b8c <main+0x158>
			  HAL_GPIO_TogglePin(MODE4_GPIO_Port, MODE4_Pin);
 8000b70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b74:	481d      	ldr	r0, [pc, #116]	; (8000bec <main+0x1b8>)
 8000b76:	f000 ff60 	bl	8001a3a <HAL_GPIO_TogglePin>
			  increaseGRN++;
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <main+0x1c4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	4a1d      	ldr	r2, [pc, #116]	; (8000bf8 <main+0x1c4>)
 8000b82:	6013      	str	r3, [r2, #0]
			  break;
 8000b84:	e002      	b.n	8000b8c <main+0x158>
		  }
	  }
 8000b86:	bf00      	nop
 8000b88:	e000      	b.n	8000b8c <main+0x158>
			  break;
 8000b8a:	bf00      	nop

	  if(isButton3Pressed() == 1)
 8000b8c:	f7ff fb02 	bl	8000194 <isButton3Pressed>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	f47f af70 	bne.w	8000a78 <main+0x44>
	  {
		  redValue = redValue + increaseRED;
 8000b98:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <main+0x1c8>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <main+0x1bc>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	4a16      	ldr	r2, [pc, #88]	; (8000bfc <main+0x1c8>)
 8000ba4:	6013      	str	r3, [r2, #0]
		  ylwValue = ylwValue + increaseYLW;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <main+0x1cc>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <main+0x1c0>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <main+0x1cc>)
 8000bb2:	6013      	str	r3, [r2, #0]
		  grnValue = grnValue + increaseGRN;
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <main+0x1d0>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <main+0x1c4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a11      	ldr	r2, [pc, #68]	; (8000c04 <main+0x1d0>)
 8000bc0:	6013      	str	r3, [r2, #0]
	  if(timer4_flag == 1) {
 8000bc2:	e759      	b.n	8000a78 <main+0x44>
 8000bc4:	200000fc 	.word	0x200000fc
 8000bc8:	200000d0 	.word	0x200000d0
 8000bcc:	20000090 	.word	0x20000090
 8000bd0:	200000d8 	.word	0x200000d8
 8000bd4:	200000e0 	.word	0x200000e0
 8000bd8:	200000e8 	.word	0x200000e8
 8000bdc:	200000f0 	.word	0x200000f0
 8000be0:	40010800 	.word	0x40010800
 8000be4:	200000b0 	.word	0x200000b0
 8000be8:	2000003c 	.word	0x2000003c
 8000bec:	40010c00 	.word	0x40010c00
 8000bf0:	200000a4 	.word	0x200000a4
 8000bf4:	200000a8 	.word	0x200000a8
 8000bf8:	200000ac 	.word	0x200000ac
 8000bfc:	20000050 	.word	0x20000050
 8000c00:	20000054 	.word	0x20000054
 8000c04:	20000058 	.word	0x20000058

08000c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b090      	sub	sp, #64	; 0x40
 8000c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0e:	f107 0318 	add.w	r3, r7, #24
 8000c12:	2228      	movs	r2, #40	; 0x28
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f001 ff18 	bl	8002a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c32:	2310      	movs	r3, #16
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3a:	f107 0318 	add.w	r3, r7, #24
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 ff14 	bl	8001a6c <HAL_RCC_OscConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c4a:	f000 f8d1 	bl	8000df0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4e:	230f      	movs	r3, #15
 8000c50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 f980 	bl	8001f6c <HAL_RCC_ClockConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c72:	f000 f8bd 	bl	8000df0 <Error_Handler>
  }
}
 8000c76:	bf00      	nop
 8000c78:	3740      	adds	r7, #64	; 0x40
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c86:	f107 0308 	add.w	r3, r7, #8
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c94:	463b      	mov	r3, r7
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_TIM2_Init+0x94>)
 8000c9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ca2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <MX_TIM2_Init+0x94>)
 8000ca6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000caa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_TIM2_Init+0x94>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_TIM2_Init+0x94>)
 8000cb4:	2209      	movs	r2, #9
 8000cb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_TIM2_Init+0x94>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_TIM2_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cc4:	4813      	ldr	r0, [pc, #76]	; (8000d14 <MX_TIM2_Init+0x94>)
 8000cc6:	f001 fab9 	bl	800223c <HAL_TIM_Base_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cd0:	f000 f88e 	bl	8000df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <MX_TIM2_Init+0x94>)
 8000ce2:	f001 fc4f 	bl	8002584 <HAL_TIM_ConfigClockSource>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cec:	f000 f880 	bl	8000df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_TIM2_Init+0x94>)
 8000cfe:	f001 fe17 	bl	8002930 <HAL_TIMEx_MasterConfigSynchronization>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d08:	f000 f872 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200000fc 	.word	0x200000fc

08000d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <MX_GPIO_Init+0xb8>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a27      	ldr	r2, [pc, #156]	; (8000dd0 <MX_GPIO_Init+0xb8>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <MX_GPIO_Init+0xb8>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0304 	and.w	r3, r3, #4
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <MX_GPIO_Init+0xb8>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <MX_GPIO_Init+0xb8>)
 8000d4a:	f043 0308 	orr.w	r3, r3, #8
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <MX_GPIO_Init+0xb8>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, setValue_Pin|LED_Blinky_Pin|EN0_Pin|EN1_Pin
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f240 71e2 	movw	r1, #2018	; 0x7e2
 8000d62:	481c      	ldr	r0, [pc, #112]	; (8000dd4 <MX_GPIO_Init+0xbc>)
 8000d64:	f000 fe51 	bl	8001a0a <HAL_GPIO_WritePin>
                          |EN2_Pin|EN3_Pin|EN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|RED1_Pin
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d6e:	481a      	ldr	r0, [pc, #104]	; (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d70:	f000 fe4b 	bl	8001a0a <HAL_GPIO_WritePin>
                          |GRN2_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|MODE2_Pin|MODE3_Pin|MODE4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : setValue_Pin LED_Blinky_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin EN4_Pin */
  GPIO_InitStruct.Pin = setValue_Pin|LED_Blinky_Pin|EN0_Pin|EN1_Pin
 8000d74:	f240 73e2 	movw	r3, #2018	; 0x7e2
 8000d78:	60bb      	str	r3, [r7, #8]
                          |EN2_Pin|EN3_Pin|EN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2302      	movs	r3, #2
 8000d84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4811      	ldr	r0, [pc, #68]	; (8000dd4 <MX_GPIO_Init+0xbc>)
 8000d8e:	f000 fcab 	bl	80016e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8000d92:	231c      	movs	r3, #28
 8000d94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 0308 	add.w	r3, r7, #8
 8000da2:	4619      	mov	r1, r3
 8000da4:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <MX_GPIO_Init+0xbc>)
 8000da6:	f000 fc9f 	bl	80016e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin RED1_Pin
                           YLW1_Pin GRN1_Pin RED2_Pin YLW2_Pin
                           GRN2_Pin D_Pin E_Pin F_Pin
                           G_Pin MODE2_Pin MODE3_Pin MODE4_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|RED1_Pin
 8000daa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dae:	60bb      	str	r3, [r7, #8]
                          |YLW1_Pin|GRN1_Pin|RED2_Pin|YLW2_Pin
                          |GRN2_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|MODE2_Pin|MODE3_Pin|MODE4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2302      	movs	r3, #2
 8000dba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_GPIO_Init+0xc0>)
 8000dc4:	f000 fc90 	bl	80016e8 <HAL_GPIO_Init>

}
 8000dc8:	bf00      	nop
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010800 	.word	0x40010800
 8000dd8:	40010c00 	.word	0x40010c00

08000ddc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	timerRun();
 8000de4:	f000 f9a2 	bl	800112c <timerRun>
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df4:	b672      	cpsid	i
}
 8000df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <Error_Handler+0x8>
	...

08000dfc <secondLaneTrafficLight>:
 *      Author: trand
 */

#include "secondLane.h"

void secondLaneTrafficLight() {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	led_buffer[3] = secondLaneCounter/10;
 8000e00:	4b66      	ldr	r3, [pc, #408]	; (8000f9c <secondLaneTrafficLight+0x1a0>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a66      	ldr	r2, [pc, #408]	; (8000fa0 <secondLaneTrafficLight+0x1a4>)
 8000e06:	fb82 1203 	smull	r1, r2, r2, r3
 8000e0a:	1092      	asrs	r2, r2, #2
 8000e0c:	17db      	asrs	r3, r3, #31
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	4a64      	ldr	r2, [pc, #400]	; (8000fa4 <secondLaneTrafficLight+0x1a8>)
 8000e12:	60d3      	str	r3, [r2, #12]
	led_buffer[4] = secondLaneCounter%10;
 8000e14:	4b61      	ldr	r3, [pc, #388]	; (8000f9c <secondLaneTrafficLight+0x1a0>)
 8000e16:	6819      	ldr	r1, [r3, #0]
 8000e18:	4b61      	ldr	r3, [pc, #388]	; (8000fa0 <secondLaneTrafficLight+0x1a4>)
 8000e1a:	fb83 2301 	smull	r2, r3, r3, r1
 8000e1e:	109a      	asrs	r2, r3, #2
 8000e20:	17cb      	asrs	r3, r1, #31
 8000e22:	1ad2      	subs	r2, r2, r3
 8000e24:	4613      	mov	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	1aca      	subs	r2, r1, r3
 8000e2e:	4b5d      	ldr	r3, [pc, #372]	; (8000fa4 <secondLaneTrafficLight+0x1a8>)
 8000e30:	611a      	str	r2, [r3, #16]
	switch (secondLaneStatus) {
 8000e32:	4b5d      	ldr	r3, [pc, #372]	; (8000fa8 <secondLaneTrafficLight+0x1ac>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	f200 80a6 	bhi.w	8000f88 <secondLaneTrafficLight+0x18c>
 8000e3c:	a201      	add	r2, pc, #4	; (adr r2, 8000e44 <secondLaneTrafficLight+0x48>)
 8000e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e42:	bf00      	nop
 8000e44:	08000e55 	.word	0x08000e55
 8000e48:	08000e81 	.word	0x08000e81
 8000e4c:	08000ed9 	.word	0x08000ed9
 8000e50:	08000f31 	.word	0x08000f31
		case 0:
		{
			HAL_GPIO_WritePin(GRN2_GPIO_Port, GRN2_Pin, 1);
 8000e54:	2201      	movs	r2, #1
 8000e56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e5a:	4854      	ldr	r0, [pc, #336]	; (8000fac <secondLaneTrafficLight+0x1b0>)
 8000e5c:	f000 fdd5 	bl	8001a0a <HAL_GPIO_WritePin>
			secondLaneCounter = grnValue;
 8000e60:	4b53      	ldr	r3, [pc, #332]	; (8000fb0 <secondLaneTrafficLight+0x1b4>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a4d      	ldr	r2, [pc, #308]	; (8000f9c <secondLaneTrafficLight+0x1a0>)
 8000e66:	6013      	str	r3, [r2, #0]
			setTimer2(grnValue*100);
 8000e68:	4b51      	ldr	r3, [pc, #324]	; (8000fb0 <secondLaneTrafficLight+0x1b4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2264      	movs	r2, #100	; 0x64
 8000e6e:	fb02 f303 	mul.w	r3, r2, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 f8ba 	bl	8000fec <setTimer2>
			secondLaneStatus = 3;
 8000e78:	4b4b      	ldr	r3, [pc, #300]	; (8000fa8 <secondLaneTrafficLight+0x1ac>)
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	601a      	str	r2, [r3, #0]
			break;
 8000e7e:	e08a      	b.n	8000f96 <secondLaneTrafficLight+0x19a>
		}
		case 1: //RED
		{
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 1);
 8000e80:	2201      	movs	r2, #1
 8000e82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e86:	4849      	ldr	r0, [pc, #292]	; (8000fac <secondLaneTrafficLight+0x1b0>)
 8000e88:	f000 fdbf 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YLW2_GPIO_Port, YLW2_Pin, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e92:	4846      	ldr	r0, [pc, #280]	; (8000fac <secondLaneTrafficLight+0x1b0>)
 8000e94:	f000 fdb9 	bl	8001a0a <HAL_GPIO_WritePin>
//				secondLaneCounter = grnValue;
//				secondLaneStatus = 3;
//			}
//			led_buffer[3] = secondLaneCounter/10;
//			led_buffer[4] = secondLaneCounter%10;
			if(timer9_flag == 1)
 8000e98:	4b46      	ldr	r3, [pc, #280]	; (8000fb4 <secondLaneTrafficLight+0x1b8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d107      	bne.n	8000eb0 <secondLaneTrafficLight+0xb4>
			{
				secondLaneCounter--;
 8000ea0:	4b3e      	ldr	r3, [pc, #248]	; (8000f9c <secondLaneTrafficLight+0x1a0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	4a3d      	ldr	r2, [pc, #244]	; (8000f9c <secondLaneTrafficLight+0x1a0>)
 8000ea8:	6013      	str	r3, [r2, #0]
				setTimer9(100);
 8000eaa:	2064      	movs	r0, #100	; 0x64
 8000eac:	f000 f92a 	bl	8001104 <setTimer9>
			}

			if(timer2_flag == 1)
 8000eb0:	4b41      	ldr	r3, [pc, #260]	; (8000fb8 <secondLaneTrafficLight+0x1bc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d169      	bne.n	8000f8c <secondLaneTrafficLight+0x190>
			{
				secondLaneCounter = grnValue;
 8000eb8:	4b3d      	ldr	r3, [pc, #244]	; (8000fb0 <secondLaneTrafficLight+0x1b4>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a37      	ldr	r2, [pc, #220]	; (8000f9c <secondLaneTrafficLight+0x1a0>)
 8000ebe:	6013      	str	r3, [r2, #0]
				secondLaneStatus = 3;
 8000ec0:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <secondLaneTrafficLight+0x1ac>)
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	601a      	str	r2, [r3, #0]
				setTimer2(grnValue*100);
 8000ec6:	4b3a      	ldr	r3, [pc, #232]	; (8000fb0 <secondLaneTrafficLight+0x1b4>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2264      	movs	r2, #100	; 0x64
 8000ecc:	fb02 f303 	mul.w	r3, r2, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f88b 	bl	8000fec <setTimer2>
			}
			break;
 8000ed6:	e059      	b.n	8000f8c <secondLaneTrafficLight+0x190>
		}
		case 2: //YELLOW
		{
			HAL_GPIO_WritePin(YLW2_GPIO_Port, YLW2_Pin, 1);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ede:	4833      	ldr	r0, [pc, #204]	; (8000fac <secondLaneTrafficLight+0x1b0>)
 8000ee0:	f000 fd93 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GRN2_GPIO_Port, GRN2_Pin, 0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eea:	4830      	ldr	r0, [pc, #192]	; (8000fac <secondLaneTrafficLight+0x1b0>)
 8000eec:	f000 fd8d 	bl	8001a0a <HAL_GPIO_WritePin>
//				secondLaneCounter = redValue;
//				secondLaneStatus = 1;
//			}
//			led_buffer[3] = secondLaneCounter/10;
//			led_buffer[4] = secondLaneCounter%10;
			if(timer9_flag == 1)
 8000ef0:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <secondLaneTrafficLight+0x1b8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d107      	bne.n	8000f08 <secondLaneTrafficLight+0x10c>
			{
				secondLaneCounter--;
 8000ef8:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <secondLaneTrafficLight+0x1a0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3b01      	subs	r3, #1
 8000efe:	4a27      	ldr	r2, [pc, #156]	; (8000f9c <secondLaneTrafficLight+0x1a0>)
 8000f00:	6013      	str	r3, [r2, #0]
				setTimer9(100);
 8000f02:	2064      	movs	r0, #100	; 0x64
 8000f04:	f000 f8fe 	bl	8001104 <setTimer9>
			}

			if(timer2_flag == 1)
 8000f08:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <secondLaneTrafficLight+0x1bc>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d13f      	bne.n	8000f90 <secondLaneTrafficLight+0x194>
			{
				secondLaneCounter = redValue;
 8000f10:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <secondLaneTrafficLight+0x1c0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a21      	ldr	r2, [pc, #132]	; (8000f9c <secondLaneTrafficLight+0x1a0>)
 8000f16:	6013      	str	r3, [r2, #0]
				secondLaneStatus = 1;
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <secondLaneTrafficLight+0x1ac>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]
				setTimer2(redValue*100);
 8000f1e:	4b27      	ldr	r3, [pc, #156]	; (8000fbc <secondLaneTrafficLight+0x1c0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2264      	movs	r2, #100	; 0x64
 8000f24:	fb02 f303 	mul.w	r3, r2, r3
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 f85f 	bl	8000fec <setTimer2>
			}
			break;
 8000f2e:	e02f      	b.n	8000f90 <secondLaneTrafficLight+0x194>
		}
		case 3: //GREEN
		{
			HAL_GPIO_WritePin(GRN2_GPIO_Port, GRN2_Pin, 1);
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f36:	481d      	ldr	r0, [pc, #116]	; (8000fac <secondLaneTrafficLight+0x1b0>)
 8000f38:	f000 fd67 	bl	8001a0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f42:	481a      	ldr	r0, [pc, #104]	; (8000fac <secondLaneTrafficLight+0x1b0>)
 8000f44:	f000 fd61 	bl	8001a0a <HAL_GPIO_WritePin>
//				secondLaneCounter = ylwValue;
//				secondLaneStatus = 2;
//			}
//			led_buffer[3] = secondLaneCounter/10;
//			led_buffer[4] = secondLaneCounter%10;
			if(timer9_flag == 1)
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <secondLaneTrafficLight+0x1b8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d107      	bne.n	8000f60 <secondLaneTrafficLight+0x164>
			{
				secondLaneCounter--;
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <secondLaneTrafficLight+0x1a0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <secondLaneTrafficLight+0x1a0>)
 8000f58:	6013      	str	r3, [r2, #0]
				setTimer9(100);
 8000f5a:	2064      	movs	r0, #100	; 0x64
 8000f5c:	f000 f8d2 	bl	8001104 <setTimer9>
			}

			if(timer2_flag == 1)
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <secondLaneTrafficLight+0x1bc>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d115      	bne.n	8000f94 <secondLaneTrafficLight+0x198>
			{
				secondLaneCounter = ylwValue;
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <secondLaneTrafficLight+0x1c4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <secondLaneTrafficLight+0x1a0>)
 8000f6e:	6013      	str	r3, [r2, #0]
				secondLaneStatus = 2;
 8000f70:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <secondLaneTrafficLight+0x1ac>)
 8000f72:	2202      	movs	r2, #2
 8000f74:	601a      	str	r2, [r3, #0]
				setTimer2(ylwValue*100);
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <secondLaneTrafficLight+0x1c4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2264      	movs	r2, #100	; 0x64
 8000f7c:	fb02 f303 	mul.w	r3, r2, r3
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 f833 	bl	8000fec <setTimer2>
			}
			break;
 8000f86:	e005      	b.n	8000f94 <secondLaneTrafficLight+0x198>
		}
		default:
			break;
 8000f88:	bf00      	nop
 8000f8a:	e004      	b.n	8000f96 <secondLaneTrafficLight+0x19a>
			break;
 8000f8c:	bf00      	nop
 8000f8e:	e002      	b.n	8000f96 <secondLaneTrafficLight+0x19a>
			break;
 8000f90:	bf00      	nop
 8000f92:	e000      	b.n	8000f96 <secondLaneTrafficLight+0x19a>
			break;
 8000f94:	bf00      	nop
	}
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200000a0 	.word	0x200000a0
 8000fa0:	66666667 	.word	0x66666667
 8000fa4:	2000003c 	.word	0x2000003c
 8000fa8:	20000098 	.word	0x20000098
 8000fac:	40010c00 	.word	0x40010c00
 8000fb0:	20000058 	.word	0x20000058
 8000fb4:	200000f8 	.word	0x200000f8
 8000fb8:	200000c0 	.word	0x200000c0
 8000fbc:	20000050 	.word	0x20000050
 8000fc0:	20000054 	.word	0x20000054

08000fc4 <setTimer1>:
int timer8_counter = 0;
int timer8_flag = 0;
int timer9_counter = 0;
int timer9_flag = 0;

void setTimer1(int duration){
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8000fcc:	4a05      	ldr	r2, [pc, #20]	; (8000fe4 <setTimer1+0x20>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <setTimer1+0x24>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	200000b4 	.word	0x200000b4
 8000fe8:	200000b8 	.word	0x200000b8

08000fec <setTimer2>:

void setTimer2(int duration){
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8000ff4:	4a05      	ldr	r2, [pc, #20]	; (800100c <setTimer2+0x20>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000ffa:	4b05      	ldr	r3, [pc, #20]	; (8001010 <setTimer2+0x24>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	200000bc 	.word	0x200000bc
 8001010:	200000c0 	.word	0x200000c0

08001014 <setTimer3>:

void setTimer3(int duration) {
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 800101c:	4a05      	ldr	r2, [pc, #20]	; (8001034 <setTimer3+0x20>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001022:	4b05      	ldr	r3, [pc, #20]	; (8001038 <setTimer3+0x24>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200000c4 	.word	0x200000c4
 8001038:	200000c8 	.word	0x200000c8

0800103c <setTimer4>:

void setTimer4(int duration) {
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8001044:	4a05      	ldr	r2, [pc, #20]	; (800105c <setTimer4+0x20>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <setTimer4+0x24>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200000cc 	.word	0x200000cc
 8001060:	200000d0 	.word	0x200000d0

08001064 <setTimer5>:

void setTimer5(int duration) {
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 800106c:	4a05      	ldr	r2, [pc, #20]	; (8001084 <setTimer5+0x20>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <setTimer5+0x24>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	200000d4 	.word	0x200000d4
 8001088:	200000d8 	.word	0x200000d8

0800108c <setTimer6>:

void setTimer6(int duration) {
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	timer6_counter = duration;
 8001094:	4a05      	ldr	r2, [pc, #20]	; (80010ac <setTimer6+0x20>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <setTimer6+0x24>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	200000dc 	.word	0x200000dc
 80010b0:	200000e0 	.word	0x200000e0

080010b4 <setTimer7>:

void setTimer7(int duration) {
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	timer7_counter = duration;
 80010bc:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <setTimer7+0x20>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <setTimer7+0x24>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	200000e4 	.word	0x200000e4
 80010d8:	200000e8 	.word	0x200000e8

080010dc <setTimer8>:

void setTimer8(int duration) {
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	timer8_counter = duration;
 80010e4:	4a05      	ldr	r2, [pc, #20]	; (80010fc <setTimer8+0x20>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
	timer8_flag = 0;
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <setTimer8+0x24>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	200000ec 	.word	0x200000ec
 8001100:	200000f0 	.word	0x200000f0

08001104 <setTimer9>:

void setTimer9(int duration) {
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	timer9_counter = duration;
 800110c:	4a05      	ldr	r2, [pc, #20]	; (8001124 <setTimer9+0x20>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6013      	str	r3, [r2, #0]
	timer9_flag = 0;
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <setTimer9+0x24>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	200000f4 	.word	0x200000f4
 8001128:	200000f8 	.word	0x200000f8

0800112c <timerRun>:

void timerRun(){
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001130:	4b49      	ldr	r3, [pc, #292]	; (8001258 <timerRun+0x12c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	dd0b      	ble.n	8001150 <timerRun+0x24>
		timer1_counter--;
 8001138:	4b47      	ldr	r3, [pc, #284]	; (8001258 <timerRun+0x12c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	3b01      	subs	r3, #1
 800113e:	4a46      	ldr	r2, [pc, #280]	; (8001258 <timerRun+0x12c>)
 8001140:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 8001142:	4b45      	ldr	r3, [pc, #276]	; (8001258 <timerRun+0x12c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d102      	bne.n	8001150 <timerRun+0x24>
			timer1_flag = 1;
 800114a:	4b44      	ldr	r3, [pc, #272]	; (800125c <timerRun+0x130>)
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0)
 8001150:	4b43      	ldr	r3, [pc, #268]	; (8001260 <timerRun+0x134>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	dd0b      	ble.n	8001170 <timerRun+0x44>
	{
		timer2_counter--;
 8001158:	4b41      	ldr	r3, [pc, #260]	; (8001260 <timerRun+0x134>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	3b01      	subs	r3, #1
 800115e:	4a40      	ldr	r2, [pc, #256]	; (8001260 <timerRun+0x134>)
 8001160:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0)
 8001162:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <timerRun+0x134>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d102      	bne.n	8001170 <timerRun+0x44>
		{
			timer2_flag = 1;
 800116a:	4b3e      	ldr	r3, [pc, #248]	; (8001264 <timerRun+0x138>)
 800116c:	2201      	movs	r2, #1
 800116e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0)
 8001170:	4b3d      	ldr	r3, [pc, #244]	; (8001268 <timerRun+0x13c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	dd0b      	ble.n	8001190 <timerRun+0x64>
	{
		timer3_counter--;
 8001178:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <timerRun+0x13c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3b01      	subs	r3, #1
 800117e:	4a3a      	ldr	r2, [pc, #232]	; (8001268 <timerRun+0x13c>)
 8001180:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0)
 8001182:	4b39      	ldr	r3, [pc, #228]	; (8001268 <timerRun+0x13c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <timerRun+0x64>
		{
			timer3_flag = 1;
 800118a:	4b38      	ldr	r3, [pc, #224]	; (800126c <timerRun+0x140>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0)
 8001190:	4b37      	ldr	r3, [pc, #220]	; (8001270 <timerRun+0x144>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	dd0b      	ble.n	80011b0 <timerRun+0x84>
	{
		timer4_counter--;
 8001198:	4b35      	ldr	r3, [pc, #212]	; (8001270 <timerRun+0x144>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	3b01      	subs	r3, #1
 800119e:	4a34      	ldr	r2, [pc, #208]	; (8001270 <timerRun+0x144>)
 80011a0:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0)
 80011a2:	4b33      	ldr	r3, [pc, #204]	; (8001270 <timerRun+0x144>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d102      	bne.n	80011b0 <timerRun+0x84>
		{
			timer4_flag = 1;
 80011aa:	4b32      	ldr	r3, [pc, #200]	; (8001274 <timerRun+0x148>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer5_counter > 0)
 80011b0:	4b31      	ldr	r3, [pc, #196]	; (8001278 <timerRun+0x14c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	dd0b      	ble.n	80011d0 <timerRun+0xa4>
	{
		timer5_counter--;
 80011b8:	4b2f      	ldr	r3, [pc, #188]	; (8001278 <timerRun+0x14c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3b01      	subs	r3, #1
 80011be:	4a2e      	ldr	r2, [pc, #184]	; (8001278 <timerRun+0x14c>)
 80011c0:	6013      	str	r3, [r2, #0]
		if(timer5_counter == 0)
 80011c2:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <timerRun+0x14c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d102      	bne.n	80011d0 <timerRun+0xa4>
		{
			timer5_flag = 1;
 80011ca:	4b2c      	ldr	r3, [pc, #176]	; (800127c <timerRun+0x150>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer6_counter > 0)
 80011d0:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <timerRun+0x154>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	dd0b      	ble.n	80011f0 <timerRun+0xc4>
	{
		timer6_counter--;
 80011d8:	4b29      	ldr	r3, [pc, #164]	; (8001280 <timerRun+0x154>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	3b01      	subs	r3, #1
 80011de:	4a28      	ldr	r2, [pc, #160]	; (8001280 <timerRun+0x154>)
 80011e0:	6013      	str	r3, [r2, #0]
		if(timer6_counter == 0)
 80011e2:	4b27      	ldr	r3, [pc, #156]	; (8001280 <timerRun+0x154>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d102      	bne.n	80011f0 <timerRun+0xc4>
		{
			timer6_flag = 1;
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <timerRun+0x158>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer7_counter > 0)
 80011f0:	4b25      	ldr	r3, [pc, #148]	; (8001288 <timerRun+0x15c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	dd0b      	ble.n	8001210 <timerRun+0xe4>
	{
		timer7_counter--;
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <timerRun+0x15c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	4a22      	ldr	r2, [pc, #136]	; (8001288 <timerRun+0x15c>)
 8001200:	6013      	str	r3, [r2, #0]
		if(timer7_counter == 0)
 8001202:	4b21      	ldr	r3, [pc, #132]	; (8001288 <timerRun+0x15c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <timerRun+0xe4>
		{
			timer7_flag = 1;
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <timerRun+0x160>)
 800120c:	2201      	movs	r2, #1
 800120e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer8_counter > 0)
 8001210:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <timerRun+0x164>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	dd0b      	ble.n	8001230 <timerRun+0x104>
	{
		timer8_counter--;
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <timerRun+0x164>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	3b01      	subs	r3, #1
 800121e:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <timerRun+0x164>)
 8001220:	6013      	str	r3, [r2, #0]
		if(timer8_counter == 0)
 8001222:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <timerRun+0x164>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d102      	bne.n	8001230 <timerRun+0x104>
		{
			timer8_flag = 1;
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <timerRun+0x168>)
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer9_counter > 0)
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <timerRun+0x16c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	dd0b      	ble.n	8001250 <timerRun+0x124>
	{
		timer9_counter--;
 8001238:	4b17      	ldr	r3, [pc, #92]	; (8001298 <timerRun+0x16c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	3b01      	subs	r3, #1
 800123e:	4a16      	ldr	r2, [pc, #88]	; (8001298 <timerRun+0x16c>)
 8001240:	6013      	str	r3, [r2, #0]
		if(timer9_counter == 0)
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <timerRun+0x16c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <timerRun+0x124>
		{
			timer9_flag = 1;
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <timerRun+0x170>)
 800124c:	2201      	movs	r2, #1
 800124e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	200000b4 	.word	0x200000b4
 800125c:	200000b8 	.word	0x200000b8
 8001260:	200000bc 	.word	0x200000bc
 8001264:	200000c0 	.word	0x200000c0
 8001268:	200000c4 	.word	0x200000c4
 800126c:	200000c8 	.word	0x200000c8
 8001270:	200000cc 	.word	0x200000cc
 8001274:	200000d0 	.word	0x200000d0
 8001278:	200000d4 	.word	0x200000d4
 800127c:	200000d8 	.word	0x200000d8
 8001280:	200000dc 	.word	0x200000dc
 8001284:	200000e0 	.word	0x200000e0
 8001288:	200000e4 	.word	0x200000e4
 800128c:	200000e8 	.word	0x200000e8
 8001290:	200000ec 	.word	0x200000ec
 8001294:	200000f0 	.word	0x200000f0
 8001298:	200000f4 	.word	0x200000f4
 800129c:	200000f8 	.word	0x200000f8

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_MspInit+0x5c>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	4a14      	ldr	r2, [pc, #80]	; (80012fc <HAL_MspInit+0x5c>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6193      	str	r3, [r2, #24]
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_MspInit+0x5c>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_MspInit+0x5c>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <HAL_MspInit+0x5c>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	61d3      	str	r3, [r2, #28]
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <HAL_MspInit+0x5c>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_MspInit+0x60>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <HAL_MspInit+0x60>)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010000 	.word	0x40010000

08001304 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001314:	d113      	bne.n	800133e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_TIM_Base_MspInit+0x44>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <HAL_TIM_Base_MspInit+0x44>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	61d3      	str	r3, [r2, #28]
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_TIM_Base_MspInit+0x44>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	201c      	movs	r0, #28
 8001334:	f000 f9a1 	bl	800167a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001338:	201c      	movs	r0, #28
 800133a:	f000 f9ba 	bl	80016b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <NMI_Handler+0x4>

08001352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <HardFault_Handler+0x4>

08001358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <MemManage_Handler+0x4>

0800135e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <BusFault_Handler+0x4>

08001364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <UsageFault_Handler+0x4>

0800136a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr

0800138e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001392:	f000 f87f 	bl	8001494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <TIM2_IRQHandler+0x10>)
 80013a2:	f000 ffe7 	bl	8002374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200000fc 	.word	0x200000fc

080013b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013be:	490d      	ldr	r1, [pc, #52]	; (80013f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c0:	4a0d      	ldr	r2, [pc, #52]	; (80013f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c4:	e002      	b.n	80013cc <LoopCopyDataInit>

080013c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ca:	3304      	adds	r3, #4

080013cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d0:	d3f9      	bcc.n	80013c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d4:	4c0a      	ldr	r4, [pc, #40]	; (8001400 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d8:	e001      	b.n	80013de <LoopFillZerobss>

080013da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013dc:	3204      	adds	r2, #4

080013de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e0:	d3fb      	bcc.n	80013da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013e2:	f7ff ffe5 	bl	80013b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013e6:	f001 fb0d 	bl	8002a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ea:	f7ff fb23 	bl	8000a34 <main>
  bx lr
 80013ee:	4770      	bx	lr
  ldr r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80013f8:	08002a9c 	.word	0x08002a9c
  ldr r2, =_sbss
 80013fc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001400:	20000148 	.word	0x20000148

08001404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC1_2_IRQHandler>
	...

08001408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_Init+0x28>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_Init+0x28>)
 8001412:	f043 0310 	orr.w	r3, r3, #16
 8001416:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001418:	2003      	movs	r0, #3
 800141a:	f000 f923 	bl	8001664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800141e:	200f      	movs	r0, #15
 8001420:	f000 f808 	bl	8001434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001424:	f7ff ff3c 	bl	80012a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40022000 	.word	0x40022000

08001434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_InitTick+0x54>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_InitTick+0x58>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	fbb3 f3f1 	udiv	r3, r3, r1
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f93b 	bl	80016ce <HAL_SYSTICK_Config>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e00e      	b.n	8001480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b0f      	cmp	r3, #15
 8001466:	d80a      	bhi.n	800147e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001468:	2200      	movs	r2, #0
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f000 f903 	bl	800167a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001474:	4a06      	ldr	r2, [pc, #24]	; (8001490 <HAL_InitTick+0x5c>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	e000      	b.n	8001480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	2000005c 	.word	0x2000005c
 800148c:	20000064 	.word	0x20000064
 8001490:	20000060 	.word	0x20000060

08001494 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_IncTick+0x1c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_IncTick+0x20>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	4a03      	ldr	r2, [pc, #12]	; (80014b4 <HAL_IncTick+0x20>)
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	20000064 	.word	0x20000064
 80014b4:	20000144 	.word	0x20000144

080014b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return uwTick;
 80014bc:	4b02      	ldr	r3, [pc, #8]	; (80014c8 <HAL_GetTick+0x10>)
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	20000144 	.word	0x20000144

080014cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e8:	4013      	ands	r3, r2
 80014ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fe:	4a04      	ldr	r2, [pc, #16]	; (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	60d3      	str	r3, [r2, #12]
}
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <__NVIC_GetPriorityGrouping+0x18>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	f003 0307 	and.w	r3, r3, #7
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	2b00      	cmp	r3, #0
 8001540:	db0b      	blt.n	800155a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	f003 021f 	and.w	r2, r3, #31
 8001548:	4906      	ldr	r1, [pc, #24]	; (8001564 <__NVIC_EnableIRQ+0x34>)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	095b      	lsrs	r3, r3, #5
 8001550:	2001      	movs	r0, #1
 8001552:	fa00 f202 	lsl.w	r2, r0, r2
 8001556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100

08001568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	2b00      	cmp	r3, #0
 800157a:	db0a      	blt.n	8001592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	490c      	ldr	r1, [pc, #48]	; (80015b4 <__NVIC_SetPriority+0x4c>)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	0112      	lsls	r2, r2, #4
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	440b      	add	r3, r1
 800158c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001590:	e00a      	b.n	80015a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4908      	ldr	r1, [pc, #32]	; (80015b8 <__NVIC_SetPriority+0x50>)
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	3b04      	subs	r3, #4
 80015a0:	0112      	lsls	r2, r2, #4
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	440b      	add	r3, r1
 80015a6:	761a      	strb	r2, [r3, #24]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000e100 	.word	0xe000e100
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	; 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f1c3 0307 	rsb	r3, r3, #7
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	bf28      	it	cs
 80015da:	2304      	movcs	r3, #4
 80015dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3304      	adds	r3, #4
 80015e2:	2b06      	cmp	r3, #6
 80015e4:	d902      	bls.n	80015ec <NVIC_EncodePriority+0x30>
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3b03      	subs	r3, #3
 80015ea:	e000      	b.n	80015ee <NVIC_EncodePriority+0x32>
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	f04f 32ff 	mov.w	r2, #4294967295
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43da      	mvns	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	401a      	ands	r2, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001604:	f04f 31ff 	mov.w	r1, #4294967295
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa01 f303 	lsl.w	r3, r1, r3
 800160e:	43d9      	mvns	r1, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	4313      	orrs	r3, r2
         );
}
 8001616:	4618      	mov	r0, r3
 8001618:	3724      	adds	r7, #36	; 0x24
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001630:	d301      	bcc.n	8001636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001632:	2301      	movs	r3, #1
 8001634:	e00f      	b.n	8001656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001636:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <SysTick_Config+0x40>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163e:	210f      	movs	r1, #15
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f7ff ff90 	bl	8001568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <SysTick_Config+0x40>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164e:	4b04      	ldr	r3, [pc, #16]	; (8001660 <SysTick_Config+0x40>)
 8001650:	2207      	movs	r2, #7
 8001652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	e000e010 	.word	0xe000e010

08001664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ff2d 	bl	80014cc <__NVIC_SetPriorityGrouping>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800168c:	f7ff ff42 	bl	8001514 <__NVIC_GetPriorityGrouping>
 8001690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	6978      	ldr	r0, [r7, #20]
 8001698:	f7ff ff90 	bl	80015bc <NVIC_EncodePriority>
 800169c:	4602      	mov	r2, r0
 800169e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff5f 	bl	8001568 <__NVIC_SetPriority>
}
 80016aa:	bf00      	nop
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff35 	bl	8001530 <__NVIC_EnableIRQ>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ffa2 	bl	8001620 <SysTick_Config>
 80016dc:	4603      	mov	r3, r0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b08b      	sub	sp, #44	; 0x2c
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fa:	e148      	b.n	800198e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016fc:	2201      	movs	r2, #1
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	429a      	cmp	r2, r3
 8001716:	f040 8137 	bne.w	8001988 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4aa3      	ldr	r2, [pc, #652]	; (80019ac <HAL_GPIO_Init+0x2c4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d05e      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
 8001724:	4aa1      	ldr	r2, [pc, #644]	; (80019ac <HAL_GPIO_Init+0x2c4>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d875      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 800172a:	4aa1      	ldr	r2, [pc, #644]	; (80019b0 <HAL_GPIO_Init+0x2c8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d058      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
 8001730:	4a9f      	ldr	r2, [pc, #636]	; (80019b0 <HAL_GPIO_Init+0x2c8>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d86f      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 8001736:	4a9f      	ldr	r2, [pc, #636]	; (80019b4 <HAL_GPIO_Init+0x2cc>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d052      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
 800173c:	4a9d      	ldr	r2, [pc, #628]	; (80019b4 <HAL_GPIO_Init+0x2cc>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d869      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 8001742:	4a9d      	ldr	r2, [pc, #628]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d04c      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
 8001748:	4a9b      	ldr	r2, [pc, #620]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d863      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 800174e:	4a9b      	ldr	r2, [pc, #620]	; (80019bc <HAL_GPIO_Init+0x2d4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d046      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
 8001754:	4a99      	ldr	r2, [pc, #612]	; (80019bc <HAL_GPIO_Init+0x2d4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d85d      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 800175a:	2b12      	cmp	r3, #18
 800175c:	d82a      	bhi.n	80017b4 <HAL_GPIO_Init+0xcc>
 800175e:	2b12      	cmp	r3, #18
 8001760:	d859      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 8001762:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <HAL_GPIO_Init+0x80>)
 8001764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001768:	080017e3 	.word	0x080017e3
 800176c:	080017bd 	.word	0x080017bd
 8001770:	080017cf 	.word	0x080017cf
 8001774:	08001811 	.word	0x08001811
 8001778:	08001817 	.word	0x08001817
 800177c:	08001817 	.word	0x08001817
 8001780:	08001817 	.word	0x08001817
 8001784:	08001817 	.word	0x08001817
 8001788:	08001817 	.word	0x08001817
 800178c:	08001817 	.word	0x08001817
 8001790:	08001817 	.word	0x08001817
 8001794:	08001817 	.word	0x08001817
 8001798:	08001817 	.word	0x08001817
 800179c:	08001817 	.word	0x08001817
 80017a0:	08001817 	.word	0x08001817
 80017a4:	08001817 	.word	0x08001817
 80017a8:	08001817 	.word	0x08001817
 80017ac:	080017c5 	.word	0x080017c5
 80017b0:	080017d9 	.word	0x080017d9
 80017b4:	4a82      	ldr	r2, [pc, #520]	; (80019c0 <HAL_GPIO_Init+0x2d8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d013      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ba:	e02c      	b.n	8001816 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	623b      	str	r3, [r7, #32]
          break;
 80017c2:	e029      	b.n	8001818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	3304      	adds	r3, #4
 80017ca:	623b      	str	r3, [r7, #32]
          break;
 80017cc:	e024      	b.n	8001818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	3308      	adds	r3, #8
 80017d4:	623b      	str	r3, [r7, #32]
          break;
 80017d6:	e01f      	b.n	8001818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	330c      	adds	r3, #12
 80017de:	623b      	str	r3, [r7, #32]
          break;
 80017e0:	e01a      	b.n	8001818 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ea:	2304      	movs	r3, #4
 80017ec:	623b      	str	r3, [r7, #32]
          break;
 80017ee:	e013      	b.n	8001818 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f8:	2308      	movs	r3, #8
 80017fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	611a      	str	r2, [r3, #16]
          break;
 8001802:	e009      	b.n	8001818 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001804:	2308      	movs	r3, #8
 8001806:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	615a      	str	r2, [r3, #20]
          break;
 800180e:	e003      	b.n	8001818 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
          break;
 8001814:	e000      	b.n	8001818 <HAL_GPIO_Init+0x130>
          break;
 8001816:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2bff      	cmp	r3, #255	; 0xff
 800181c:	d801      	bhi.n	8001822 <HAL_GPIO_Init+0x13a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	e001      	b.n	8001826 <HAL_GPIO_Init+0x13e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3304      	adds	r3, #4
 8001826:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	2bff      	cmp	r3, #255	; 0xff
 800182c:	d802      	bhi.n	8001834 <HAL_GPIO_Init+0x14c>
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	e002      	b.n	800183a <HAL_GPIO_Init+0x152>
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	3b08      	subs	r3, #8
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	210f      	movs	r1, #15
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	fa01 f303 	lsl.w	r3, r1, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	401a      	ands	r2, r3
 800184c:	6a39      	ldr	r1, [r7, #32]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	431a      	orrs	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 8090 	beq.w	8001988 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001868:	4b56      	ldr	r3, [pc, #344]	; (80019c4 <HAL_GPIO_Init+0x2dc>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a55      	ldr	r2, [pc, #340]	; (80019c4 <HAL_GPIO_Init+0x2dc>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <HAL_GPIO_Init+0x2dc>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001880:	4a51      	ldr	r2, [pc, #324]	; (80019c8 <HAL_GPIO_Init+0x2e0>)
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	089b      	lsrs	r3, r3, #2
 8001886:	3302      	adds	r3, #2
 8001888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	220f      	movs	r2, #15
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4013      	ands	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a49      	ldr	r2, [pc, #292]	; (80019cc <HAL_GPIO_Init+0x2e4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d00d      	beq.n	80018c8 <HAL_GPIO_Init+0x1e0>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a48      	ldr	r2, [pc, #288]	; (80019d0 <HAL_GPIO_Init+0x2e8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d007      	beq.n	80018c4 <HAL_GPIO_Init+0x1dc>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a47      	ldr	r2, [pc, #284]	; (80019d4 <HAL_GPIO_Init+0x2ec>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_GPIO_Init+0x1d8>
 80018bc:	2302      	movs	r3, #2
 80018be:	e004      	b.n	80018ca <HAL_GPIO_Init+0x1e2>
 80018c0:	2303      	movs	r3, #3
 80018c2:	e002      	b.n	80018ca <HAL_GPIO_Init+0x1e2>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <HAL_GPIO_Init+0x1e2>
 80018c8:	2300      	movs	r3, #0
 80018ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018cc:	f002 0203 	and.w	r2, r2, #3
 80018d0:	0092      	lsls	r2, r2, #2
 80018d2:	4093      	lsls	r3, r2
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018da:	493b      	ldr	r1, [pc, #236]	; (80019c8 <HAL_GPIO_Init+0x2e0>)
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	089b      	lsrs	r3, r3, #2
 80018e0:	3302      	adds	r3, #2
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d006      	beq.n	8001902 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018f4:	4b38      	ldr	r3, [pc, #224]	; (80019d8 <HAL_GPIO_Init+0x2f0>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4937      	ldr	r1, [pc, #220]	; (80019d8 <HAL_GPIO_Init+0x2f0>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	600b      	str	r3, [r1, #0]
 8001900:	e006      	b.n	8001910 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001902:	4b35      	ldr	r3, [pc, #212]	; (80019d8 <HAL_GPIO_Init+0x2f0>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	43db      	mvns	r3, r3
 800190a:	4933      	ldr	r1, [pc, #204]	; (80019d8 <HAL_GPIO_Init+0x2f0>)
 800190c:	4013      	ands	r3, r2
 800190e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d006      	beq.n	800192a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800191c:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <HAL_GPIO_Init+0x2f0>)
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	492d      	ldr	r1, [pc, #180]	; (80019d8 <HAL_GPIO_Init+0x2f0>)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	604b      	str	r3, [r1, #4]
 8001928:	e006      	b.n	8001938 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800192a:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <HAL_GPIO_Init+0x2f0>)
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	43db      	mvns	r3, r3
 8001932:	4929      	ldr	r1, [pc, #164]	; (80019d8 <HAL_GPIO_Init+0x2f0>)
 8001934:	4013      	ands	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001944:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <HAL_GPIO_Init+0x2f0>)
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	4923      	ldr	r1, [pc, #140]	; (80019d8 <HAL_GPIO_Init+0x2f0>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	608b      	str	r3, [r1, #8]
 8001950:	e006      	b.n	8001960 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001952:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <HAL_GPIO_Init+0x2f0>)
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	43db      	mvns	r3, r3
 800195a:	491f      	ldr	r1, [pc, #124]	; (80019d8 <HAL_GPIO_Init+0x2f0>)
 800195c:	4013      	ands	r3, r2
 800195e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d006      	beq.n	800197a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <HAL_GPIO_Init+0x2f0>)
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	4919      	ldr	r1, [pc, #100]	; (80019d8 <HAL_GPIO_Init+0x2f0>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	60cb      	str	r3, [r1, #12]
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_GPIO_Init+0x2f0>)
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	43db      	mvns	r3, r3
 8001982:	4915      	ldr	r1, [pc, #84]	; (80019d8 <HAL_GPIO_Init+0x2f0>)
 8001984:	4013      	ands	r3, r2
 8001986:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	3301      	adds	r3, #1
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	f47f aeaf 	bne.w	80016fc <HAL_GPIO_Init+0x14>
  }
}
 800199e:	bf00      	nop
 80019a0:	bf00      	nop
 80019a2:	372c      	adds	r7, #44	; 0x2c
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	10320000 	.word	0x10320000
 80019b0:	10310000 	.word	0x10310000
 80019b4:	10220000 	.word	0x10220000
 80019b8:	10210000 	.word	0x10210000
 80019bc:	10120000 	.word	0x10120000
 80019c0:	10110000 	.word	0x10110000
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40010000 	.word	0x40010000
 80019cc:	40010800 	.word	0x40010800
 80019d0:	40010c00 	.word	0x40010c00
 80019d4:	40011000 	.word	0x40011000
 80019d8:	40010400 	.word	0x40010400

080019dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	887b      	ldrh	r3, [r7, #2]
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019f4:	2301      	movs	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	e001      	b.n	80019fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	460b      	mov	r3, r1
 8001a14:	807b      	strh	r3, [r7, #2]
 8001a16:	4613      	mov	r3, r2
 8001a18:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a1a:	787b      	ldrb	r3, [r7, #1]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a20:	887a      	ldrh	r2, [r7, #2]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a26:	e003      	b.n	8001a30 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a28:	887b      	ldrh	r3, [r7, #2]
 8001a2a:	041a      	lsls	r2, r3, #16
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	611a      	str	r2, [r3, #16]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr

08001a3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b085      	sub	sp, #20
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	460b      	mov	r3, r1
 8001a44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a4c:	887a      	ldrh	r2, [r7, #2]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4013      	ands	r3, r2
 8001a52:	041a      	lsls	r2, r3, #16
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	43d9      	mvns	r1, r3
 8001a58:	887b      	ldrh	r3, [r7, #2]
 8001a5a:	400b      	ands	r3, r1
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	611a      	str	r2, [r3, #16]
}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e26c      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8087 	beq.w	8001b9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a8c:	4b92      	ldr	r3, [pc, #584]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d00c      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a98:	4b8f      	ldr	r3, [pc, #572]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d112      	bne.n	8001aca <HAL_RCC_OscConfig+0x5e>
 8001aa4:	4b8c      	ldr	r3, [pc, #560]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab0:	d10b      	bne.n	8001aca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab2:	4b89      	ldr	r3, [pc, #548]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d06c      	beq.n	8001b98 <HAL_RCC_OscConfig+0x12c>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d168      	bne.n	8001b98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e246      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad2:	d106      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x76>
 8001ad4:	4b80      	ldr	r3, [pc, #512]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a7f      	ldr	r2, [pc, #508]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	e02e      	b.n	8001b40 <HAL_RCC_OscConfig+0xd4>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x98>
 8001aea:	4b7b      	ldr	r3, [pc, #492]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a7a      	ldr	r2, [pc, #488]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	4b78      	ldr	r3, [pc, #480]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a77      	ldr	r2, [pc, #476]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e01d      	b.n	8001b40 <HAL_RCC_OscConfig+0xd4>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0xbc>
 8001b0e:	4b72      	ldr	r3, [pc, #456]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a71      	ldr	r2, [pc, #452]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b6f      	ldr	r3, [pc, #444]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a6e      	ldr	r2, [pc, #440]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	e00b      	b.n	8001b40 <HAL_RCC_OscConfig+0xd4>
 8001b28:	4b6b      	ldr	r3, [pc, #428]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a6a      	ldr	r2, [pc, #424]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4b68      	ldr	r3, [pc, #416]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a67      	ldr	r2, [pc, #412]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d013      	beq.n	8001b70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fcb6 	bl	80014b8 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff fcb2 	bl	80014b8 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	; 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e1fa      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	4b5d      	ldr	r3, [pc, #372]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0xe4>
 8001b6e:	e014      	b.n	8001b9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7ff fca2 	bl	80014b8 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b78:	f7ff fc9e 	bl	80014b8 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e1e6      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8a:	4b53      	ldr	r3, [pc, #332]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x10c>
 8001b96:	e000      	b.n	8001b9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d063      	beq.n	8001c6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ba6:	4b4c      	ldr	r3, [pc, #304]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00b      	beq.n	8001bca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bb2:	4b49      	ldr	r3, [pc, #292]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d11c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x18c>
 8001bbe:	4b46      	ldr	r3, [pc, #280]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d116      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bca:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d005      	beq.n	8001be2 <HAL_RCC_OscConfig+0x176>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e1ba      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be2:	4b3d      	ldr	r3, [pc, #244]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4939      	ldr	r1, [pc, #228]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf6:	e03a      	b.n	8001c6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d020      	beq.n	8001c42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c00:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7ff fc57 	bl	80014b8 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0e:	f7ff fc53 	bl	80014b8 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e19b      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c20:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4927      	ldr	r1, [pc, #156]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	600b      	str	r3, [r1, #0]
 8001c40:	e015      	b.n	8001c6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c42:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7ff fc36 	bl	80014b8 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c50:	f7ff fc32 	bl	80014b8 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e17a      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d03a      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d019      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c82:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c88:	f7ff fc16 	bl	80014b8 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c90:	f7ff fc12 	bl	80014b8 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e15a      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f000 faa6 	bl	8002200 <RCC_Delay>
 8001cb4:	e01c      	b.n	8001cf0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cbc:	f7ff fbfc 	bl	80014b8 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc2:	e00f      	b.n	8001ce4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc4:	f7ff fbf8 	bl	80014b8 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d908      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e140      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	42420000 	.word	0x42420000
 8001ce0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce4:	4b9e      	ldr	r3, [pc, #632]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1e9      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80a6 	beq.w	8001e4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d02:	4b97      	ldr	r3, [pc, #604]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10d      	bne.n	8001d2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	4b94      	ldr	r3, [pc, #592]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	4a93      	ldr	r2, [pc, #588]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d18:	61d3      	str	r3, [r2, #28]
 8001d1a:	4b91      	ldr	r3, [pc, #580]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d26:	2301      	movs	r3, #1
 8001d28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2a:	4b8e      	ldr	r3, [pc, #568]	; (8001f64 <HAL_RCC_OscConfig+0x4f8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d118      	bne.n	8001d68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d36:	4b8b      	ldr	r3, [pc, #556]	; (8001f64 <HAL_RCC_OscConfig+0x4f8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a8a      	ldr	r2, [pc, #552]	; (8001f64 <HAL_RCC_OscConfig+0x4f8>)
 8001d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d42:	f7ff fbb9 	bl	80014b8 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4a:	f7ff fbb5 	bl	80014b8 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b64      	cmp	r3, #100	; 0x64
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e0fd      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	4b81      	ldr	r3, [pc, #516]	; (8001f64 <HAL_RCC_OscConfig+0x4f8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d106      	bne.n	8001d7e <HAL_RCC_OscConfig+0x312>
 8001d70:	4b7b      	ldr	r3, [pc, #492]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	4a7a      	ldr	r2, [pc, #488]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6213      	str	r3, [r2, #32]
 8001d7c:	e02d      	b.n	8001dda <HAL_RCC_OscConfig+0x36e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x334>
 8001d86:	4b76      	ldr	r3, [pc, #472]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4a75      	ldr	r2, [pc, #468]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	6213      	str	r3, [r2, #32]
 8001d92:	4b73      	ldr	r3, [pc, #460]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4a72      	ldr	r2, [pc, #456]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	f023 0304 	bic.w	r3, r3, #4
 8001d9c:	6213      	str	r3, [r2, #32]
 8001d9e:	e01c      	b.n	8001dda <HAL_RCC_OscConfig+0x36e>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2b05      	cmp	r3, #5
 8001da6:	d10c      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x356>
 8001da8:	4b6d      	ldr	r3, [pc, #436]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	4a6c      	ldr	r2, [pc, #432]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	6213      	str	r3, [r2, #32]
 8001db4:	4b6a      	ldr	r3, [pc, #424]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4a69      	ldr	r2, [pc, #420]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6213      	str	r3, [r2, #32]
 8001dc0:	e00b      	b.n	8001dda <HAL_RCC_OscConfig+0x36e>
 8001dc2:	4b67      	ldr	r3, [pc, #412]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	4a66      	ldr	r2, [pc, #408]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	6213      	str	r3, [r2, #32]
 8001dce:	4b64      	ldr	r3, [pc, #400]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	4a63      	ldr	r2, [pc, #396]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	f023 0304 	bic.w	r3, r3, #4
 8001dd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d015      	beq.n	8001e0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de2:	f7ff fb69 	bl	80014b8 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de8:	e00a      	b.n	8001e00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dea:	f7ff fb65 	bl	80014b8 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e0ab      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e00:	4b57      	ldr	r3, [pc, #348]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0ee      	beq.n	8001dea <HAL_RCC_OscConfig+0x37e>
 8001e0c:	e014      	b.n	8001e38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0e:	f7ff fb53 	bl	80014b8 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7ff fb4f 	bl	80014b8 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e095      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2c:	4b4c      	ldr	r3, [pc, #304]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1ee      	bne.n	8001e16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d105      	bne.n	8001e4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3e:	4b48      	ldr	r3, [pc, #288]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4a47      	ldr	r2, [pc, #284]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 8081 	beq.w	8001f56 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e54:	4b42      	ldr	r3, [pc, #264]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 030c 	and.w	r3, r3, #12
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d061      	beq.n	8001f24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d146      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e68:	4b3f      	ldr	r3, [pc, #252]	; (8001f68 <HAL_RCC_OscConfig+0x4fc>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6e:	f7ff fb23 	bl	80014b8 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e76:	f7ff fb1f 	bl	80014b8 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e067      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e88:	4b35      	ldr	r3, [pc, #212]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f0      	bne.n	8001e76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9c:	d108      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e9e:	4b30      	ldr	r3, [pc, #192]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	492d      	ldr	r1, [pc, #180]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb0:	4b2b      	ldr	r3, [pc, #172]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a19      	ldr	r1, [r3, #32]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	4927      	ldr	r1, [pc, #156]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec8:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <HAL_RCC_OscConfig+0x4fc>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7ff faf3 	bl	80014b8 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed6:	f7ff faef 	bl	80014b8 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e037      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x46a>
 8001ef4:	e02f      	b.n	8001f56 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <HAL_RCC_OscConfig+0x4fc>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fadc 	bl	80014b8 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff fad8 	bl	80014b8 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e020      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x498>
 8001f22:	e018      	b.n	8001f56 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e013      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d001      	beq.n	8001f56 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40007000 	.word	0x40007000
 8001f68:	42420060 	.word	0x42420060

08001f6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0d0      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f80:	4b6a      	ldr	r3, [pc, #424]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d910      	bls.n	8001fb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b67      	ldr	r3, [pc, #412]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 0207 	bic.w	r2, r3, #7
 8001f96:	4965      	ldr	r1, [pc, #404]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b63      	ldr	r3, [pc, #396]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0b8      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d020      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc8:	4b59      	ldr	r3, [pc, #356]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	4a58      	ldr	r2, [pc, #352]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe0:	4b53      	ldr	r3, [pc, #332]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4a52      	ldr	r2, [pc, #328]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fec:	4b50      	ldr	r3, [pc, #320]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	494d      	ldr	r1, [pc, #308]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d040      	beq.n	800208c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d107      	bne.n	8002022 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	4b47      	ldr	r3, [pc, #284]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d115      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e07f      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d107      	bne.n	800203a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202a:	4b41      	ldr	r3, [pc, #260]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e073      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203a:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e06b      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204a:	4b39      	ldr	r3, [pc, #228]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f023 0203 	bic.w	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4936      	ldr	r1, [pc, #216]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800205c:	f7ff fa2c 	bl	80014b8 <HAL_GetTick>
 8002060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002062:	e00a      	b.n	800207a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002064:	f7ff fa28 	bl	80014b8 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e053      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 020c 	and.w	r2, r3, #12
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	429a      	cmp	r2, r3
 800208a:	d1eb      	bne.n	8002064 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800208c:	4b27      	ldr	r3, [pc, #156]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d210      	bcs.n	80020bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 0207 	bic.w	r2, r3, #7
 80020a2:	4922      	ldr	r1, [pc, #136]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b20      	ldr	r3, [pc, #128]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e032      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c8:	4b19      	ldr	r3, [pc, #100]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4916      	ldr	r1, [pc, #88]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d009      	beq.n	80020fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	490e      	ldr	r1, [pc, #56]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020fa:	f000 f821 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 80020fe:	4602      	mov	r2, r0
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	490a      	ldr	r1, [pc, #40]	; (8002134 <HAL_RCC_ClockConfig+0x1c8>)
 800210c:	5ccb      	ldrb	r3, [r1, r3]
 800210e:	fa22 f303 	lsr.w	r3, r2, r3
 8002112:	4a09      	ldr	r2, [pc, #36]	; (8002138 <HAL_RCC_ClockConfig+0x1cc>)
 8002114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <HAL_RCC_ClockConfig+0x1d0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff f98a 	bl	8001434 <HAL_InitTick>

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40022000 	.word	0x40022000
 8002130:	40021000 	.word	0x40021000
 8002134:	08002a84 	.word	0x08002a84
 8002138:	2000005c 	.word	0x2000005c
 800213c:	20000060 	.word	0x20000060

08002140 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002140:	b490      	push	{r4, r7}
 8002142:	b08a      	sub	sp, #40	; 0x28
 8002144:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002146:	4b2a      	ldr	r3, [pc, #168]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002148:	1d3c      	adds	r4, r7, #4
 800214a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800214c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002150:	f240 2301 	movw	r3, #513	; 0x201
 8002154:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	2300      	movs	r3, #0
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800216a:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b04      	cmp	r3, #4
 8002178:	d002      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x40>
 800217a:	2b08      	cmp	r3, #8
 800217c:	d003      	beq.n	8002186 <HAL_RCC_GetSysClockFreq+0x46>
 800217e:	e02d      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002182:	623b      	str	r3, [r7, #32]
      break;
 8002184:	e02d      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	0c9b      	lsrs	r3, r3, #18
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002192:	4413      	add	r3, r2
 8002194:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002198:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d013      	beq.n	80021cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021a4:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	0c5b      	lsrs	r3, r3, #17
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021b2:	4413      	add	r3, r2
 80021b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021be:	fb02 f203 	mul.w	r2, r2, r3
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ca:	e004      	b.n	80021d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80021d0:	fb02 f303 	mul.w	r3, r2, r3
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	623b      	str	r3, [r7, #32]
      break;
 80021da:	e002      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021de:	623b      	str	r3, [r7, #32]
      break;
 80021e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021e2:	6a3b      	ldr	r3, [r7, #32]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3728      	adds	r7, #40	; 0x28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc90      	pop	{r4, r7}
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	08002a74 	.word	0x08002a74
 80021f4:	40021000 	.word	0x40021000
 80021f8:	007a1200 	.word	0x007a1200
 80021fc:	003d0900 	.word	0x003d0900

08002200 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002208:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <RCC_Delay+0x34>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <RCC_Delay+0x38>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	0a5b      	lsrs	r3, r3, #9
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800221c:	bf00      	nop
  }
  while (Delay --);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1e5a      	subs	r2, r3, #1
 8002222:	60fa      	str	r2, [r7, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f9      	bne.n	800221c <RCC_Delay+0x1c>
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	2000005c 	.word	0x2000005c
 8002238:	10624dd3 	.word	0x10624dd3

0800223c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e041      	b.n	80022d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d106      	bne.n	8002268 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff f84e 	bl	8001304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3304      	adds	r3, #4
 8002278:	4619      	mov	r1, r3
 800227a:	4610      	mov	r0, r2
 800227c:	f000 fa6a 	bl	8002754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d001      	beq.n	80022f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e035      	b.n	8002360 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a16      	ldr	r2, [pc, #88]	; (800236c <HAL_TIM_Base_Start_IT+0x90>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d009      	beq.n	800232a <HAL_TIM_Base_Start_IT+0x4e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231e:	d004      	beq.n	800232a <HAL_TIM_Base_Start_IT+0x4e>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a12      	ldr	r2, [pc, #72]	; (8002370 <HAL_TIM_Base_Start_IT+0x94>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d111      	bne.n	800234e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b06      	cmp	r3, #6
 800233a:	d010      	beq.n	800235e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234c:	e007      	b.n	800235e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0201 	orr.w	r2, r2, #1
 800235c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40012c00 	.word	0x40012c00
 8002370:	40000400 	.word	0x40000400

08002374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b02      	cmp	r3, #2
 8002388:	d122      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b02      	cmp	r3, #2
 8002396:	d11b      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0202 	mvn.w	r2, #2
 80023a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f9b1 	bl	800271e <HAL_TIM_IC_CaptureCallback>
 80023bc:	e005      	b.n	80023ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f9a4 	bl	800270c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f9b3 	bl	8002730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d122      	bne.n	8002424 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d11b      	bne.n	8002424 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0204 	mvn.w	r2, #4
 80023f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f987 	bl	800271e <HAL_TIM_IC_CaptureCallback>
 8002410:	e005      	b.n	800241e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f97a 	bl	800270c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f989 	bl	8002730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b08      	cmp	r3, #8
 8002430:	d122      	bne.n	8002478 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	2b08      	cmp	r3, #8
 800243e:	d11b      	bne.n	8002478 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0208 	mvn.w	r2, #8
 8002448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2204      	movs	r2, #4
 800244e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f95d 	bl	800271e <HAL_TIM_IC_CaptureCallback>
 8002464:	e005      	b.n	8002472 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f950 	bl	800270c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f95f 	bl	8002730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f003 0310 	and.w	r3, r3, #16
 8002482:	2b10      	cmp	r3, #16
 8002484:	d122      	bne.n	80024cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0310 	and.w	r3, r3, #16
 8002490:	2b10      	cmp	r3, #16
 8002492:	d11b      	bne.n	80024cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0210 	mvn.w	r2, #16
 800249c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2208      	movs	r2, #8
 80024a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f933 	bl	800271e <HAL_TIM_IC_CaptureCallback>
 80024b8:	e005      	b.n	80024c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f926 	bl	800270c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f935 	bl	8002730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d10e      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d107      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0201 	mvn.w	r2, #1
 80024f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fe fc72 	bl	8000ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002502:	2b80      	cmp	r3, #128	; 0x80
 8002504:	d10e      	bne.n	8002524 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002510:	2b80      	cmp	r3, #128	; 0x80
 8002512:	d107      	bne.n	8002524 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800251c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fa67 	bl	80029f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252e:	2b40      	cmp	r3, #64	; 0x40
 8002530:	d10e      	bne.n	8002550 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253c:	2b40      	cmp	r3, #64	; 0x40
 800253e:	d107      	bne.n	8002550 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f8f9 	bl	8002742 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b20      	cmp	r3, #32
 800255c:	d10e      	bne.n	800257c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0320 	and.w	r3, r3, #32
 8002568:	2b20      	cmp	r3, #32
 800256a:	d107      	bne.n	800257c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0220 	mvn.w	r2, #32
 8002574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fa32 	bl	80029e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_TIM_ConfigClockSource+0x18>
 8002598:	2302      	movs	r3, #2
 800259a:	e0b3      	b.n	8002704 <HAL_TIM_ConfigClockSource+0x180>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d4:	d03e      	beq.n	8002654 <HAL_TIM_ConfigClockSource+0xd0>
 80025d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025da:	f200 8087 	bhi.w	80026ec <HAL_TIM_ConfigClockSource+0x168>
 80025de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e2:	f000 8085 	beq.w	80026f0 <HAL_TIM_ConfigClockSource+0x16c>
 80025e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ea:	d87f      	bhi.n	80026ec <HAL_TIM_ConfigClockSource+0x168>
 80025ec:	2b70      	cmp	r3, #112	; 0x70
 80025ee:	d01a      	beq.n	8002626 <HAL_TIM_ConfigClockSource+0xa2>
 80025f0:	2b70      	cmp	r3, #112	; 0x70
 80025f2:	d87b      	bhi.n	80026ec <HAL_TIM_ConfigClockSource+0x168>
 80025f4:	2b60      	cmp	r3, #96	; 0x60
 80025f6:	d050      	beq.n	800269a <HAL_TIM_ConfigClockSource+0x116>
 80025f8:	2b60      	cmp	r3, #96	; 0x60
 80025fa:	d877      	bhi.n	80026ec <HAL_TIM_ConfigClockSource+0x168>
 80025fc:	2b50      	cmp	r3, #80	; 0x50
 80025fe:	d03c      	beq.n	800267a <HAL_TIM_ConfigClockSource+0xf6>
 8002600:	2b50      	cmp	r3, #80	; 0x50
 8002602:	d873      	bhi.n	80026ec <HAL_TIM_ConfigClockSource+0x168>
 8002604:	2b40      	cmp	r3, #64	; 0x40
 8002606:	d058      	beq.n	80026ba <HAL_TIM_ConfigClockSource+0x136>
 8002608:	2b40      	cmp	r3, #64	; 0x40
 800260a:	d86f      	bhi.n	80026ec <HAL_TIM_ConfigClockSource+0x168>
 800260c:	2b30      	cmp	r3, #48	; 0x30
 800260e:	d064      	beq.n	80026da <HAL_TIM_ConfigClockSource+0x156>
 8002610:	2b30      	cmp	r3, #48	; 0x30
 8002612:	d86b      	bhi.n	80026ec <HAL_TIM_ConfigClockSource+0x168>
 8002614:	2b20      	cmp	r3, #32
 8002616:	d060      	beq.n	80026da <HAL_TIM_ConfigClockSource+0x156>
 8002618:	2b20      	cmp	r3, #32
 800261a:	d867      	bhi.n	80026ec <HAL_TIM_ConfigClockSource+0x168>
 800261c:	2b00      	cmp	r3, #0
 800261e:	d05c      	beq.n	80026da <HAL_TIM_ConfigClockSource+0x156>
 8002620:	2b10      	cmp	r3, #16
 8002622:	d05a      	beq.n	80026da <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002624:	e062      	b.n	80026ec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6899      	ldr	r1, [r3, #8]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f000 f95c 	bl	80028f2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002648:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	609a      	str	r2, [r3, #8]
      break;
 8002652:	e04e      	b.n	80026f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	6899      	ldr	r1, [r3, #8]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f000 f945 	bl	80028f2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002676:	609a      	str	r2, [r3, #8]
      break;
 8002678:	e03b      	b.n	80026f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6859      	ldr	r1, [r3, #4]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	461a      	mov	r2, r3
 8002688:	f000 f8bc 	bl	8002804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2150      	movs	r1, #80	; 0x50
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f913 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 8002698:	e02b      	b.n	80026f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6859      	ldr	r1, [r3, #4]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	461a      	mov	r2, r3
 80026a8:	f000 f8da 	bl	8002860 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2160      	movs	r1, #96	; 0x60
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 f903 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 80026b8:	e01b      	b.n	80026f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	6859      	ldr	r1, [r3, #4]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	461a      	mov	r2, r3
 80026c8:	f000 f89c 	bl	8002804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2140      	movs	r1, #64	; 0x40
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f8f3 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 80026d8:	e00b      	b.n	80026f2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4619      	mov	r1, r3
 80026e4:	4610      	mov	r0, r2
 80026e6:	f000 f8ea 	bl	80028be <TIM_ITRx_SetConfig>
        break;
 80026ea:	e002      	b.n	80026f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026ec:	bf00      	nop
 80026ee:	e000      	b.n	80026f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr

0800271e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr

08002754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a25      	ldr	r2, [pc, #148]	; (80027fc <TIM_Base_SetConfig+0xa8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d007      	beq.n	800277c <TIM_Base_SetConfig+0x28>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002772:	d003      	beq.n	800277c <TIM_Base_SetConfig+0x28>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a22      	ldr	r2, [pc, #136]	; (8002800 <TIM_Base_SetConfig+0xac>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d108      	bne.n	800278e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a1a      	ldr	r2, [pc, #104]	; (80027fc <TIM_Base_SetConfig+0xa8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d007      	beq.n	80027a6 <TIM_Base_SetConfig+0x52>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279c:	d003      	beq.n	80027a6 <TIM_Base_SetConfig+0x52>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a17      	ldr	r2, [pc, #92]	; (8002800 <TIM_Base_SetConfig+0xac>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d108      	bne.n	80027b8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a07      	ldr	r2, [pc, #28]	; (80027fc <TIM_Base_SetConfig+0xa8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d103      	bne.n	80027ec <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	615a      	str	r2, [r3, #20]
}
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr
 80027fc:	40012c00 	.word	0x40012c00
 8002800:	40000400 	.word	0x40000400

08002804 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	f023 0201 	bic.w	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800282e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f023 030a 	bic.w	r3, r3, #10
 8002840:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4313      	orrs	r3, r2
 8002848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	621a      	str	r2, [r3, #32]
}
 8002856:	bf00      	nop
 8002858:	371c      	adds	r7, #28
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	f023 0210 	bic.w	r2, r3, #16
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800288a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	031b      	lsls	r3, r3, #12
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	4313      	orrs	r3, r2
 8002894:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800289c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	621a      	str	r2, [r3, #32]
}
 80028b4:	bf00      	nop
 80028b6:	371c      	adds	r7, #28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028be:	b480      	push	{r7}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	f043 0307 	orr.w	r3, r3, #7
 80028e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	609a      	str	r2, [r3, #8]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b087      	sub	sp, #28
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
 80028fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800290c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	021a      	lsls	r2, r3, #8
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	431a      	orrs	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	4313      	orrs	r3, r2
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4313      	orrs	r3, r2
 800291e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	609a      	str	r2, [r3, #8]
}
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002944:	2302      	movs	r3, #2
 8002946:	e041      	b.n	80029cc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a14      	ldr	r2, [pc, #80]	; (80029d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d009      	beq.n	80029a0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002994:	d004      	beq.n	80029a0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a10      	ldr	r2, [pc, #64]	; (80029dc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d10c      	bne.n	80029ba <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40012c00 	.word	0x40012c00
 80029dc:	40000400 	.word	0x40000400

080029e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <__libc_init_array>:
 8002a04:	b570      	push	{r4, r5, r6, lr}
 8002a06:	2600      	movs	r6, #0
 8002a08:	4d0c      	ldr	r5, [pc, #48]	; (8002a3c <__libc_init_array+0x38>)
 8002a0a:	4c0d      	ldr	r4, [pc, #52]	; (8002a40 <__libc_init_array+0x3c>)
 8002a0c:	1b64      	subs	r4, r4, r5
 8002a0e:	10a4      	asrs	r4, r4, #2
 8002a10:	42a6      	cmp	r6, r4
 8002a12:	d109      	bne.n	8002a28 <__libc_init_array+0x24>
 8002a14:	f000 f822 	bl	8002a5c <_init>
 8002a18:	2600      	movs	r6, #0
 8002a1a:	4d0a      	ldr	r5, [pc, #40]	; (8002a44 <__libc_init_array+0x40>)
 8002a1c:	4c0a      	ldr	r4, [pc, #40]	; (8002a48 <__libc_init_array+0x44>)
 8002a1e:	1b64      	subs	r4, r4, r5
 8002a20:	10a4      	asrs	r4, r4, #2
 8002a22:	42a6      	cmp	r6, r4
 8002a24:	d105      	bne.n	8002a32 <__libc_init_array+0x2e>
 8002a26:	bd70      	pop	{r4, r5, r6, pc}
 8002a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a2c:	4798      	blx	r3
 8002a2e:	3601      	adds	r6, #1
 8002a30:	e7ee      	b.n	8002a10 <__libc_init_array+0xc>
 8002a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a36:	4798      	blx	r3
 8002a38:	3601      	adds	r6, #1
 8002a3a:	e7f2      	b.n	8002a22 <__libc_init_array+0x1e>
 8002a3c:	08002a94 	.word	0x08002a94
 8002a40:	08002a94 	.word	0x08002a94
 8002a44:	08002a94 	.word	0x08002a94
 8002a48:	08002a98 	.word	0x08002a98

08002a4c <memset>:
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4402      	add	r2, r0
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d100      	bne.n	8002a56 <memset+0xa>
 8002a54:	4770      	bx	lr
 8002a56:	f803 1b01 	strb.w	r1, [r3], #1
 8002a5a:	e7f9      	b.n	8002a50 <memset+0x4>

08002a5c <_init>:
 8002a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5e:	bf00      	nop
 8002a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a62:	bc08      	pop	{r3}
 8002a64:	469e      	mov	lr, r3
 8002a66:	4770      	bx	lr

08002a68 <_fini>:
 8002a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a6a:	bf00      	nop
 8002a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a6e:	bc08      	pop	{r3}
 8002a70:	469e      	mov	lr, r3
 8002a72:	4770      	bx	lr
